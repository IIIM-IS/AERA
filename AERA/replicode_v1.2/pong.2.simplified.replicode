; Same as pong.2.replicode, but remove the drive to keep re-injecting the "run" goal (apparently unnecessary).
; Here the ball travels without walls at a constant velocity

;(apparently unnecessary) !load drives.replicode

;;;;;;;;;;;;;
;; objects ;;
b:(ent 1)
[
[]; view
   SYNC_ONCE; sync (synchronization mode)
   now;       injection time
   1;         saliency
   forever;   resilience
   root;      group
   nil;       origin
]; Set of views
ball:(ont 1) [[SYNC_ONCE now 0 forever root nil]]
b_is_a_ball:(mk.val b essence ball 1) |[]
; Even though (fact b_is_a_ball ::) is not used in this file, the pattern extractor needs it.
f_b_is_a_ball:(fact b_is_a_ball 0us MAX_TIME 1 1) [[SYNC_AXIOM now 1 forever stdin nil]]

;;;;;;;;;;;;;;;;;;;;;
;; Top-level model ;;

;(apparently unnecessary) m_run_0:(mdl 
;(apparently unnecessary) |[]; template arguments
;(apparently unnecessary) []; LHS and RHS patterns of the model
;(apparently unnecessary)    (fact (mk.val b: position_y : :) t0: t1: ::); LHS
;(apparently unnecessary)    (fact run t0: t1: ::);                 drive. RHS
;(apparently unnecessary) |[]; forward guards
;(apparently unnecessary) |[]; backward guards
;(apparently unnecessary) [stdin drives]; output groups
;(apparently unnecessary) 1; strength of the model
;(apparently unnecessary) 1; number of evidences
;(apparently unnecessary) 1; success rate
;(apparently unnecessary) 0; derivative of the success rate
;(apparently unnecessary) 1; psln_tr (saliency change propagation threshold)
;(apparently unnecessary) ) [[SYNC_ONCE now 1 forever primary nil 1]]

;;;;;;;;;;;;;;;;;;;;;;
;; input generators ;;

; This program runs once to set the initial position_y at 0, and velocity_y at 0.0001.
; The initial position_y is a fact at some time from now until now plus the sampling_period.
; The initial velocity_y is a fact at any time from now until MAX_TIME.
start:(pgm |[] |[] |[] []
   (prb [1 "print" "starting..." |[]])
   (inj []
      p:(mk.val b position_y 0 1)
      |[]
   )
   (inj []
      (fact p after:(now) (+ after sampling_period) 1 1)
      [SYNC_PERIODIC now 1 1 stdin nil]
   )
   (inj []
      s:(mk.val b velocity_y 0.0001 1)
      |[]
   )
   (inj []
      (fact s now MAX_TIME 1 1)
      [SYNC_HOLD now 1 forever stdin nil]
   )
1) |[]

istart:(ipgm start |[] RUN_ONCE sampling_period VOLATILE NOTIFY 1) [[SYNC_ONCE now 0 forever stdin nil 1]]

; This program simulates the environment where b moves at constant velocity changing position_y every sampling_period.
; If AERA were connected through I/O to the environment, this would not be necessary.
pgm0:(pgm
|[]; template arguments
[];  patterns defining the inputs
   (ptn f:(fact (mk.val b position_y py: :) after: before: ::) |[])
   (ptn (fact (mk.val b velocity_y sy: :) ::) |[])
|[]; guards
[];  productions
   (inj []
      p:(mk.val b position_y (+ py (* sy sampling_period)) 1); The new position_y is the starting position plus velocity times the sampling_period.
      |[]
   )
   (inj []
      (fact p (+ after sampling_period) (+ before sampling_period) 1 1); The new position_y is a fact at some time as the starting position plus the sampling_period.
      [SYNC_PERIODIC (+ f.vw.ijt sampling_period) 1 1 stdin nil]; f.vw.ijt gets the inject time of the fact f.
   )
   (prb [1 "print" "updated the position..." [p]]); Can be useful to change usr_operators\Callbacks\callbacks.cpp to print only objects[0]->code(3).asFloat()
1) |[]

; This program has ACTIVATION=1 and will thus run.
ipgm0:(ipgm
pgm0;       the code
|[];        instantiation values
RUN_ALWAYS; boolean RUN_ALWAYS/ONCE
20000us;   time scope
VOLATILE;
NOTIFY;     notify flag
1) [[SYNC_ONCE now 0 forever stdin nil 1]]
