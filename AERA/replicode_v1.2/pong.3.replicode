;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Dynamic Program Production ;;
;; This example keeps track of the previous position of the ball with (mk.val b last_known m 1)
;; The ball in this example travels continuously forward at a fixed velocity
;; See Replicode_A_constructivist_programming_paradigm_and_language_2013.pdf at page 17

;;;;;;;;;;;;;
;; objects ;;

b:(ent 1) [[SYNC_ONCE now 1 forever root nil]]
ball:(ont 1) [[SYNC_ONCE now 0 forever root nil]]
b_is_a_ball:(mk.val b essence ball 1) |[]
f_b_is_a_ball:(fact b_is_a_ball 0us MAX_TIME 1 1) [[SYNC_AXIOM now 1 forever stdin nil]]

last_known:(ont 1) [[SYNC_ONCE now 0 forever root nil]]

!def update_period 500000us

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; P1 and P2 are the main programs for keeping track of the last position for each ball ;;
P1:(pgm
[]; (ptn f:(fact (mk.val ref_b: position ref_pos: :) ref_t: ::) |[])
   (ptn ref_b:(ent ::) |[])
   (ptn ref_pos: |[])
   (ptn ref_t: |[])
[]; inputs
   (ptn (fact m:(mk.val b: position pos: :) t: ::) [(= b ref_b) (> t ref_t) (<> pos ref_pos)])
|[]; guards
[]; productions
   (prb [1 "print" "P1" [pos]]); Can be useful to change usr_operators\Callbacks\callbacks.cpp to print only objects[0]->code(3).asFloat()
   (inj []
      p:(mk.val b last_known m 1)
      |[]
   )
   (inj []
      (ins P1 [b pos t] RUN_ONCE now VOLATILE SILENT)
      [SYNC_ONCE now 0 forever stdin nil 1]
   )
   (set [this.vw.res 0]); kills the original
1) |[]

P2:(pgm
[(ptn ref_b: |[])]
[]; inputs
   (ptn f:(fact m:(mk.val b: position pos: :) after: before: ::) [(<> b ref_b)]); This setup can at most handle two different balls
|[]; guards
[]; productions
   (prb [1 "print" "P2" [pos]])
   (inj []
      (ins P1 [b pos after] RUN_ONCE 0us VOLATILE SILENT)
      [SYNC_ONCE now 0 forever stdin nil 1]
   )
   (set [this.vw.res 0])
1) |[]

iP2:(ipgm P2 [nil] RUN_ONCE 500000us VOLATILE SILENT 1) [[SYNC_ONCE now 0 forever stdin nil 1]]

;;;;;;;;;;;;;;;;;;;;;;
;; input generators ;;

; Start program, sets the initial position
start:(pgm |[] |[] |[] []
   (prb [1 "print" "Initial position set" |[]])
   (inj []
      p:(mk.val b position 0 1)
      |[]
   )
   (inj []
      (fact p after:(now) (+ after update_period) 1 1)
      [SYNC_PERIODIC now 1 1 stdin nil]
   )
1) |[]

istart:(ipgm start |[] RUN_ONCE 1000000us VOLATILE SILENT 1) [[SYNC_ONCE now 0 forever stdin nil 1]]

; The main loop, updates the position
pgm0:(pgm |[] []
   (ptn f:(fact (mk.val b position py: :) after: before: ::) |[])
|[] []
   (inj []
      p:(mk.val b position (+ py 10) 1)
      |[]
   )
   (inj []
      (fact p (+ after update_period) (+ before update_period) 1 1)
      [SYNC_PERIODIC (+ f.vw.ijt update_period) 1 1 stdin nil]
   )
   (prb [1 "print" "Position updated" |[]])
1) |[]

ipgm0:(ipgm pgm0 |[] RUN_ALWAYS MAX_TIME VOLATILE NOTIFY 1) [[SYNC_ONCE now 0 forever stdin nil 1]]
