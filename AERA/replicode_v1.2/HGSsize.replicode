; By this replicode example, robot arm learns different grasping policies for objects in relation to their properties.
; We provide a scenario where the robot arm learns to grab a [small cube] by grap_type1.
; Then, when it is assigned to to grab a [large cube] it uses the analogy to create a new model that says it can apply
;    grab_type1 to grab the new large object. When it fails, it hypothesize anti-CST-REQs that say
;    if the object is [large cube] it cannot use grab_type1 command. 
; By babbling it grabs the [large cube] by grab_type2, after which is learns a new triad of CST MDLs.
; Then, it is assigned to grab a [small sphere]. It hypothesizes that it can apply grab_type1, as the object is [small], which gets sucessful.



small:(ont 1) [[SYNC_ONCE now 1 forever root nil]]
large:(ont 1) [[SYNC_ONCE now 1 forever root nil]]
size:(ont 1) [[SYNC_ONCE now 0 forever root nil]]

h:(ent 1) [[SYNC_ONCE now 1 forever root nil]]
h_is_a_hand:(mk.val h essence hand 1) |[]
(fact h_is_a_hand 0s:0ms:0us GIGASEC 1 1) [[SYNC_AXIOM now 1 forever stdin nil]]

c1:(ent 1) [[SYNC_ONCE now 1 forever root nil]]
c1_is_a_cube:(mk.val c1 essence cube 1) |[]
(fact c1_is_a_cube 0s:0ms:0us GIGASEC 1 1) [[SYNC_AXIOM now 1 forever stdin nil]]
c1_is_small:(mk.val c1 size small 1) |[]
(fact c1_is_small 0s:0ms:0us GIGASEC 1 1) [[SYNC_AXIOM now 1 forever stdin nil]]
c1_is_a_hand:(mk.val c1 essence hand 1) |[]
; This is needed for S3.
(|fact c1_is_a_hand 0s:0ms:0us GIGASEC 1 1) [[SYNC_AXIOM now 1 forever stdin nil]]

c2:(ent 1) [[SYNC_ONCE now 1 forever root nil]]
c2_is_a_cube:(mk.val c2 essence cube 1) |[]
(fact c2_is_a_cube 0s:0ms:0us GIGASEC 1 1) [[SYNC_AXIOM now 1 forever stdin nil]]
c2_is_large:(mk.val c2 size large 1) |[]
(fact c2_is_large 0s:0ms:0us GIGASEC 1 1) [[SYNC_AXIOM now 1 forever stdin nil]]
c2_is_a_hand:(mk.val c2 essence hand 1) |[]
; This is needed for S3.
(|fact c2_is_a_hand 0s:0ms:0us GIGASEC 1 1) [[SYNC_AXIOM now 1 forever stdin nil]]

s1:(ent 1) [[SYNC_ONCE now 1 forever root nil]]
s1_is_a_cylinder:(mk.val s1 essence cylinder 1) |[]
(fact s1_is_a_cylinder 0s:0ms:0us GIGASEC 1 1) [[SYNC_AXIOM now 1 forever stdin nil]]
s1_is_small:(mk.val s1 size small 1) |[]
(fact s1_is_small 0s:0ms:0us GIGASEC 1 1) [[SYNC_AXIOM now 1 forever stdin nil]]
s1_is_a_hand:(mk.val s1 essence hand 1) |[]
; This is needed for S3.
(|fact s1_is_a_hand 0s:0ms:0us GIGASEC 1 1) [[SYNC_AXIOM now 1 forever stdin nil]]


; Internal state used by the programs to emulate the environment.
; (mk.val e1 emulator_state [Holding_obj Pos_h Pos_c1 Pos_c2 Pos_s1])
e1:(ent 1) [[SYNC_ONCE now 1 forever root nil]]
emulator_state:(ont 1) [[SYNC_ONCE now 0 forever root nil]]
; Inject the emulator state into the emulator group.
emulator:(std_grp 2 0 0 0 []) [[SYNC_ONCE now 0 forever root nil COV_OFF 0]]

; This program runs in the primary group to re-inject any (fact (goal (fact (cmd ::)))) into emulator.
pgm_inject_in_emulator_group:(pgm [] []
   (ptn F_G:(fact G:(goal (fact (cmd ::) ::) ::) ::) [])
[]
   ; Only re-inject non-simulation goals.
   (= (is_sim G) false)
[]
   (inj [F_G [SYNC_ONCE (now) 1 1 emulator nil]])
1) |[]
(ipgm pgm_inject_in_emulator_group [] RUN_ALWAYS MAX_TIME VOLATILE NOTIFY 1) []
   [SYNC_ONCE now 0 forever primary nil 1]

; Hand H has position P.
S0:(cst [] []
   (fact (mk.val H: essence hand :) T0: T1: : :); Changed X to hand.
   (fact (mk.val H: position P: :) T0: T1: : :)
|[]
|[]
[stdin] 1) [[SYNC_ONCE now 0 forever primary nil 1]]

; A thing C of kind X occupies position P. (Modified to exclude when C is a hand.)
S3:(cst [] []
   (fact (mk.val C: essence X: :) T0: T1: : :)
   (fact (mk.val C: position P: :) T0: T1: : :)
   (|fact (mk.val C: essence hand :) T0: T1: : :); Don't duplicate S0, which is for hands.
|[]
|[]
[stdin] 1) [[SYNC_ONCE now 0 forever primary nil 1]]

; A thing C of kind X occupies position P. (Modified to exclude when C is a hand.)
S4:(cst [] []
   (fact (mk.val C: size X: :) T0: T1: : :)
   (fact (mk.val C: position P: :) T0: T1: : :)
   (|fact (mk.val C: essence hand :) T0: T1: : :); Don't duplicate S0, which is for hands.
|[]
|[]
[stdin] 1) [[SYNC_ONCE now 0 forever primary nil 1]]



; Initial conditions.
start:(pgm [] [] [] []
   (inj [State:(mk.val e1 emulator_state [nil 0 5 10 15] 1) []])
   (inj []
      (fact State After:(now) (+ After sampling_period) 1 1)
      [SYNC_PERIODIC now 1 1 emulator nil]
   )
1) |[]
(ipgm start [] RUN_ONCE sampling_period VOLATILE NOTIFY 1) [[SYNC_ONCE now 0 forever stdin nil 1]]

m_drive:(mdl [] []
   ; The goal target timings are the same as the drive timings.
   (fact (mk.val h holding [c2] 1) T0: T1: 1 1)
   (fact run T0: T1: ::)
|[]
|[]
[stdin drives] 1 1 1 0 1) [[SYNC_ONCE now 0 forever primary nil 1]]

m_drive2:(mdl [] []
   ; The goal target timings are the same as the drive timings.
   (fact (mk.val h holding [s1] 1) T0: T1: 1 1)
   (fact run2 T0: T1: ::)
|[]
|[]
[stdin drives] 1 1 1 0 1) [[SYNC_ONCE now 0 forever primary nil 1]]


pgm_babbleA_1:(pgm [] []
   ; This fact repeats periodically. We use it as a "heartbeat".
   (ptn (fact (mk.val h essence hand :) After: Before: ::) [])
[]
   (>= After (+ this.vw.ijt 100ms))
[]
   ; Move where initial and final positions have no objects so that they are not correlated.
   (inj [Command:(cmd move [h 5] 1) []])
   (inj [F_Command:(fact Command After Before 1 1) []])
   (inj [G:(goal F_Command self nil 1) []])
   (inj []
      ; Delay a little to allow predictions for this sampling period before processing.
      (fact G T0:(+ After 10ms) T0 1 1)
      [SYNC_ONCE T0 1 forever primary nil]
   )
   (prb [1 "print" "injected (cmd move [h 5])" []])
1) |[]
(ipgm pgm_babbleA_1 [] RUN_ONCE MAX_TIME VOLATILE NOTIFY 1) []
   [SYNC_ONCE now 0 forever primary nil 1]

pgm_babbleA_2:(pgm [] []
   ; This fact repeats periodically. We use it as a "heartbeat".
   (ptn (fact (mk.val h essence hand :) After: Before: ::) [])
[]
   (>= After (+ this.vw.ijt 200ms))
[]
   ; Grab the cube 1.
   (inj [Command:(cmd grab_type1 [h] 1) []])
   (inj [F_Command:(fact Command After Before 1 1) []])
   (inj [G:(goal F_Command self nil 1) []])
   (inj []
      ; Delay a little to allow predictions for this sampling period before processing.
      (fact G T0:(+ After 10ms) T0 1 1)
      [SYNC_ONCE T0 1 forever primary nil]
   )
   (prb [1 "print" "injected (cmd grab_type1 [h])" []])
1) |[]
(ipgm pgm_babbleA_2 [] RUN_ONCE MAX_TIME VOLATILE NOTIFY 1) []
   [SYNC_ONCE now 0 forever primary nil 1]

pgm_babbleA_3:(pgm [] []
   ; This fact repeats periodically. We use it as a "heartbeat".
   (ptn (fact (mk.val h essence hand :) After: Before: ::) [])
[]
   (>= After (+ this.vw.ijt 300ms))
[]
   ; Release the cube 2 to learn the release model and the "holding" cst.
   (inj [Command:(cmd release [h] 1) []])
   (inj [F_Command:(fact Command After Before 1 1) []])
   (inj [G:(goal F_Command self nil 1) []])
   (inj []
      ; Delay a little to allow predictions for this sampling period before processing.
      (fact G T0:(+ After 10ms) T0 1 1)
      [SYNC_ONCE T0 1 forever primary nil]
   )
   (prb [1 "print" "injected (cmd release [h])" []])
1) |[]
(ipgm pgm_babbleA_3 [] RUN_ONCE MAX_TIME VOLATILE NOTIFY 1) []
   [SYNC_ONCE now 0 forever primary nil 1]

pgm_babbleA_4:(pgm [] []
   ; This fact repeats periodically. We use it as a "heartbeat".
   (ptn (fact (mk.val h essence hand :) After: Before: ::) [])
[]
   (>= After (+ this.vw.ijt 400ms))
[]
   ; Release the cube 2 to learn the release model and the "holding" cst.
   (inj [Command:(cmd move [h 5] 1) []])
   (inj [F_Command:(fact Command After Before 1 1) []])
   (inj [G:(goal F_Command self nil 1) []])
   (inj []
      ; Delay a little to allow predictions for this sampling period before processing.
      (fact G T0:(+ After 10ms) T0 1 1)
      [SYNC_ONCE T0 1 forever primary nil]
   )
   (prb [1 "print" "injected (cmd move [h 5])" []])
1) |[]
(ipgm pgm_babbleA_4 [] RUN_ONCE MAX_TIME VOLATILE NOTIFY 1) []
   [SYNC_ONCE now 0 forever primary nil 1]

pgm_inject_drive_pass1:(pgm [] []
   ; This fact repeats periodically. We use it as a "heartbeat".
   (ptn (fact (mk.val h essence hand :) After: Before: ::) [])
[]
   (= After (+ this.vw.ijt 500ms))
[]
   ; The end of the time interval will be used in m_drive as the end of the goal interval.
   (inj [F_run:(fact run After (+ Before 600ms) 1 1) []])
   (inj [G:(goal F_run self nil 1) []])
   (inj []
      ; Delay a little to allow predictions for this sampling period before injecting the drive.
      (fact G T0:(+ After 10ms) T0 1 1)
      [SYNC_ONCE T0 1 forever primary nil]
   )
   (prb [1 "print" "injected drive" []])
1) |[]
(ipgm pgm_inject_drive_pass1 [] RUN_ALWAYS MAX_TIME VOLATILE NOTIFY 1) []
   [SYNC_ONCE now 0 forever primary nil 1]

pgm_babbleA_6:(pgm [] []
   ; This fact repeats periodically. We use it as a "heartbeat".
   (ptn (fact (mk.val h essence hand :) After: Before: ::) [])
[]
   (>= After (+ this.vw.ijt 600ms))
[]
   ; Release the cube 2 to learn the release model and the "holding" cst.
   (inj [Command:(cmd move [h -5] 1) []])
   (inj [F_Command:(fact Command After Before 1 1) []])
   (inj [G:(goal F_Command self nil 1) []])
   (inj []
      ; Delay a little to allow predictions for this sampling period before processing.
      (fact G T0:(+ After 10ms) T0 1 1)
      [SYNC_ONCE T0 1 forever primary nil]
   )
   (prb [1 "print" "injected (cmd move [h -5])" []])
1) |[]
(ipgm pgm_babbleA_6 [] RUN_ONCE MAX_TIME VOLATILE NOTIFY 1) []
   [SYNC_ONCE now 0 forever primary nil 1]

pgm_babbleA_7:(pgm [] []
   ; This fact repeats periodically. We use it as a "heartbeat".
   (ptn (fact (mk.val h essence hand :) After: Before: ::) [])
[]
   (>= After (+ this.vw.ijt 700ms))
[]
   ; Grab the cube 1.
   (inj [Command:(cmd grab_type1 [h] 1) []])
   (inj [F_Command:(fact Command After Before 1 1) []])
   (inj [G:(goal F_Command self nil 1) []])
   (inj []
      ; Delay a little to allow predictions for this sampling period before processing.
      (fact G T0:(+ After 10ms) T0 1 1)
      [SYNC_ONCE T0 1 forever primary nil]
   )
   (prb [1 "print" "injected (cmd grab_type1 [h])" []])
1) |[]
(ipgm pgm_babbleA_7 [] RUN_ONCE MAX_TIME VOLATILE NOTIFY 1) []
   [SYNC_ONCE now 0 forever primary nil 1]

pgm_babbleA_8:(pgm [] []
   ; This fact repeats periodically. We use it as a "heartbeat".
   (ptn (fact (mk.val h essence hand :) After: Before: ::) [])
[]
   (>= After (+ this.vw.ijt 800ms))
[]
   ; Release the cube 2 to learn the release model and the "holding" cst.
   (inj [Command:(cmd release [h] 1) []])
   (inj [F_Command:(fact Command After Before 1 1) []])
   (inj [G:(goal F_Command self nil 1) []])
   (inj []
      ; Delay a little to allow predictions for this sampling period before processing.
      (fact G T0:(+ After 10ms) T0 1 1)
      [SYNC_ONCE T0 1 forever primary nil]
   )
   (prb [1 "print" "injected (cmd release [h])" []])
1) |[]
(ipgm pgm_babbleA_8 [] RUN_ONCE MAX_TIME VOLATILE NOTIFY 1) []
   [SYNC_ONCE now 0 forever primary nil 1]

pgm_babbleA_9:(pgm [] []
   ; This fact repeats periodically. We use it as a "heartbeat".
   (ptn (fact (mk.val h essence hand :) After: Before: ::) [])
[]
   (>= After (+ this.vw.ijt 900ms))
[]
   ; Grab the cube 1.
   (inj [Command:(cmd grab_type1 [h] 1) []])
   (inj [F_Command:(fact Command After Before 1 1) []])
   (inj [G:(goal F_Command self nil 1) []])
   (inj []
      ; Delay a little to allow predictions for this sampling period before processing.
      (fact G T0:(+ After 10ms) T0 1 1)
      [SYNC_ONCE T0 1 forever primary nil]
   )
   (prb [1 "print" "injected (cmd grab_type1 [h])" []])
1) |[]
(ipgm pgm_babbleA_9 [] RUN_ONCE MAX_TIME VOLATILE NOTIFY 1) []
   [SYNC_ONCE now 0 forever primary nil 1]

pgm_babbleA_10:(pgm [] []
   ; This fact repeats periodically. We use it as a "heartbeat".
   (ptn (fact (mk.val h essence hand :) After: Before: ::) [])
[]
   (>= After (+ this.vw.ijt 1000ms))
[]
   ; Release the cube 2 to learn the release model and the "holding" cst.
   (inj [Command:(cmd release [h] 1) []])
   (inj [F_Command:(fact Command After Before 1 1) []])
   (inj [G:(goal F_Command self nil 1) []])
   (inj []
      ; Delay a little to allow predictions for this sampling period before processing.
      (fact G T0:(+ After 10ms) T0 1 1)
      [SYNC_ONCE T0 1 forever primary nil]
   )
   (prb [1 "print" "injected (cmd release [h])" []])
1) |[]
(ipgm pgm_babbleA_10 [] RUN_ONCE MAX_TIME VOLATILE NOTIFY 1) []
   [SYNC_ONCE now 0 forever primary nil 1]

pgm_babbleA_11:(pgm [] []
   ; This fact repeats periodically. We use it as a "heartbeat".
   (ptn (fact (mk.val h essence hand :) After: Before: ::) [])
[]
   (>= After (+ this.vw.ijt 1100ms))
[]
   ; Release the cube 2 to learn the release model and the "holding" cst.
   (inj [Command:(cmd move [h 5] 1) []])
   (inj [F_Command:(fact Command After Before 1 1) []])
   (inj [G:(goal F_Command self nil 1) []])
   (inj []
      ; Delay a little to allow predictions for this sampling period before processing.
      (fact G T0:(+ After 10ms) T0 1 1)
      [SYNC_ONCE T0 1 forever primary nil]
   )
   (prb [1 "print" "injected (cmd move [h 5])" []])
1) |[]
(ipgm pgm_babbleA_11 [] RUN_ONCE MAX_TIME VOLATILE NOTIFY 1) []
   [SYNC_ONCE now 0 forever primary nil 1]

pgm_babbleA_12:(pgm [] []
   ; This fact repeats periodically. We use it as a "heartbeat".
   (ptn (fact (mk.val h essence hand :) After: Before: ::) [])
[]
   (>= After (+ this.vw.ijt 1200ms))
[]
   ; Release the cube 2 to learn the release model and the "holding" cst.
   (inj [Command:(cmd grab_type2 [h] 1) []])
   (inj [F_Command:(fact Command After Before 1 1) []])
   (inj [G:(goal F_Command self nil 1) []])
   (inj []
      ; Delay a little to allow predictions for this sampling period before processing.
      (fact G T0:(+ After 10ms) T0 1 1)
      [SYNC_ONCE T0 1 forever primary nil]
   )
   (prb [1 "print" "injected (cmd mgrab_type2 [h])" []])
1) |[]
(ipgm pgm_babbleA_12 [] RUN_ONCE MAX_TIME VOLATILE NOTIFY 1) []
   [SYNC_ONCE now 0 forever primary nil 1]

pgm_babbleA_13:(pgm [] []
   ; This fact repeats periodically. We use it as a "heartbeat".
   (ptn (fact (mk.val h essence hand :) After: Before: ::) [])
[]
   (>= After (+ this.vw.ijt 1300ms))
[]
   ; Release the cube 2 to learn the release model and the "holding" cst.
   (inj [Command:(cmd release [h] 1) []])
   (inj [F_Command:(fact Command After Before 1 1) []])
   (inj [G:(goal F_Command self nil 1) []])
   (inj []
      ; Delay a little to allow predictions for this sampling period before processing.
      (fact G T0:(+ After 10ms) T0 1 1)
      [SYNC_ONCE T0 1 forever primary nil]
   )
   (prb [1 "print" "injected (cmd release [h])" []])
1) |[]
(ipgm pgm_babbleA_13 [] RUN_ONCE MAX_TIME VOLATILE NOTIFY 1) []
   [SYNC_ONCE now 0 forever primary nil 1]

pgm_babbleA_14:(pgm [] []
   ; This fact repeats periodically. We use it as a "heartbeat".
   (ptn (fact (mk.val h essence hand :) After: Before: ::) [])
[]
   (>= After (+ this.vw.ijt 1400ms))
[]
   ; Release the cube 2 to learn the release model and the "holding" cst.
   (inj [Command:(cmd move [h 5] 1) []])
   (inj [F_Command:(fact Command After Before 1 1) []])
   (inj [G:(goal F_Command self nil 1) []])
   (inj []
      ; Delay a little to allow predictions for this sampling period before processing.
      (fact G T0:(+ After 10ms) T0 1 1)
      [SYNC_ONCE T0 1 forever primary nil]
   )
   (prb [1 "print" "injected (cmd move [h 5])" []])
1) |[]
(ipgm pgm_babbleA_14 [] RUN_ONCE MAX_TIME VOLATILE NOTIFY 1) []
   [SYNC_ONCE now 0 forever primary nil 1]


pgm_inject_drive_pass2:(pgm [] []
   ; This fact repeats periodically. We use it as a "heartbeat".
   (ptn (fact (mk.val h essence hand :) After: Before: ::) [])
[]
   (= After (+ this.vw.ijt 1500ms))
[]
   ; The end of the time interval will be used in m_drive as the end of the goal interval.
   (inj [F_run:(fact run2 After (+ Before 600ms) 1 1) []])
   (inj [G:(goal F_run self nil 1) []])
   (inj []
      ; Delay a little to allow predictions for this sampling period before injecting the drive.
      (fact G T0:(+ After 10ms) T0 1 1)
      [SYNC_ONCE T0 1 forever primary nil]
   )
   (prb [1 "print" "injected drive 2" []])
1) |[]
(ipgm pgm_inject_drive_pass2 [] RUN_ALWAYS MAX_TIME VOLATILE NOTIFY 1) []
   [SYNC_ONCE now 0 forever primary nil 1]

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

pgm_cmd_move_h_not_holding:(pgm [] []
   (ptn (fact G:(goal (fact (cmd move [h DeltaP_in:] ::) Cmd_after: Cmd_before: ::) ::) ::) [])
   (ptn (fact (mk.val e1 emulator_state [nil Pos_h: Pos_c1: Pos_c2: Pos_s1:] :) After: Before: ::) [])
[]
   (= (is_sim G) false)
   (< Cmd_after Before)
   (> Cmd_before After)
[]
   ; Limit DeltaP to +/- 20. Inject the fact that the command was executed.
   (inj [Command:(cmd move [h DeltaP:(min (max DeltaP_in -20) 20)] 1) []])
   (inj []
      (fact Command (+ After 20ms) Before 1 1)
      [SYNC_ONCE After 1 1 stdin nil]
   )
   ; Move h by DeltaP.
   (inj [Next_state:(mk.val e1 emulator_state [nil (+ Pos_h DeltaP) Pos_c1 Pos_c2 Pos_s1] 1) []])
   (inj []
      (fact Next_state (+ After sampling_period) (+ Before sampling_period) 1 1)
      [SYNC_PERIODIC (+ After sampling_period) 1 1 emulator nil]
   )
   (prb [1 "print" "pgm_cmd_move_h_not_holding from command:" [Command]])
1) |[]
(ipgm pgm_cmd_move_h_not_holding [] RUN_ALWAYS MAX_TIME VOLATILE NOTIFY 1) []
   [SYNC_ONCE now 0 forever emulator nil 1]


pgm_cmd_release_h:(pgm [] []
   (ptn (fact G:(goal (fact Command:(cmd release [h] ::) Cmd_after: Cmd_before: ::) ::) ::) [])
   (ptn (fact (mk.val e1 emulator_state [Holding_obj: Pos_h: Pos_c1: Pos_c2: Pos_s1:] :) After: Before: ::) [])
[]
   (= (is_sim G) false)
   (<> Holding_obj nil)
   (< Cmd_after Before)
   (> Cmd_before After)
[]
   ; Inject the fact that the command was executed.
   (inj []
      (fact Command (+ After 20ms) Before 1 1)
      [SYNC_ONCE After 1 1 stdin nil]
   )
   ; h is now not holding.
   (inj [Next_state:(mk.val e1 emulator_state [nil Pos_h Pos_c1 Pos_c2 Pos_s1] 1) []])
   (inj []
      (fact Next_state (+ After sampling_period) (+ Before sampling_period) 1 1)
      [SYNC_PERIODIC (+ After sampling_period) 1 1 emulator nil]
   )
   (prb [1 "print" "pgm_cmd_release_h from command:" [Command]])
1) |[]
(ipgm pgm_cmd_release_h [] RUN_ALWAYS MAX_TIME VOLATILE NOTIFY 1) []
   [SYNC_ONCE now 0 forever emulator nil 1]

pgm_cmd_grab_h_c1:(pgm [] []
   (ptn (fact G:(goal (fact Command:(cmd grab_type1 [h] ::) Cmd_after: Cmd_before: ::) ::) ::) [])
   (ptn (fact (mk.val e1 emulator_state [nil Pos_h: Pos_c1: Pos_c2: Pos_s1:] :) After: Before: ::) [])
[]
   (= Pos_h Pos_c1); For h to grab c1, they must be at the same position.
   (= (is_sim G) false)
   (< Cmd_after Before)
   (> Cmd_before After)
[]
   ; Inject the fact that the command was executed.
   (inj []
      (fact Command (+ After 20ms) Before 1 1)
      [SYNC_ONCE After 1 1 stdin nil]
   )
   (inj [Next_state:(mk.val e1 emulator_state [c1 Pos_h Pos_c1 Pos_c2 Pos_s1] 1) []])
   (inj []
      (fact Next_state (+ After sampling_period) (+ Before sampling_period) 1 1)
      [SYNC_PERIODIC (+ After sampling_period) 1 1 emulator nil]
   )
   (prb [1 "print" "pgm_cmd_grab_type1_c1 from command:" [Command]])
1) |[]
(ipgm pgm_cmd_grab_h_c1 [] RUN_ALWAYS MAX_TIME VOLATILE NOTIFY 1) []
   [SYNC_ONCE now 0 forever emulator nil 1]

pgm_cmd_grab_h_c1_fail:(pgm [] []
   (ptn (fact G:(goal (fact Command:(cmd grab_type2 [h] ::) Cmd_after: Cmd_before: ::) ::) ::) [])
   (ptn (fact (mk.val e1 emulator_state [nil Pos_h: Pos_c1: Pos_c2: Pos_s1:] :) After: Before: ::) [])
[]
   (= Pos_h Pos_c1)
   (= (is_sim G) false)
   (< Cmd_after Before)
   (> Cmd_before After)
[]
   ; Inject the fact that the command was executed.
   (inj []
      (fact Command (+ After 20ms) Before 1 1)
      [SYNC_ONCE After 1 1 stdin nil]
   )
   (inj [Next_state:(mk.val e1 emulator_state [nil Pos_h Pos_c1 Pos_c2 Pos_s1] 1) []])
   (inj []
      (fact Next_state (+ After sampling_period) (+ Before sampling_period) 1 1)
      [SYNC_PERIODIC (+ After sampling_period) 1 1 emulator nil]
   )
   (prb [1 "print" "pgm_cmd_grab_h_c1_fail from command:" [Command]])
1) |[]
(ipgm pgm_cmd_grab_h_c1_fail [] RUN_ALWAYS MAX_TIME VOLATILE NOTIFY 1) []
   [SYNC_ONCE now 0 forever emulator nil 1]

pgm_cmd_grab_h_c2:(pgm [] []
   (ptn (fact G:(goal (fact Command:(cmd grab_type2 [h] ::) Cmd_after: Cmd_before: ::) ::) ::) [])
   (ptn (fact (mk.val e1 emulator_state [nil Pos_h: Pos_c1: Pos_c2: Pos_s1:] :) After: Before: ::) [])
[]
   (= Pos_h Pos_c2); For h to grab c1, they must be at the same position.
   (= (is_sim G) false)
   (< Cmd_after Before)
   (> Cmd_before After)
[]
   ; Inject the fact that the command was executed.
   (inj []
      (fact Command (+ After 20ms) Before 1 1)
      [SYNC_ONCE After 1 1 stdin nil]
   )
   (inj [Next_state:(mk.val e1 emulator_state [c2 Pos_h Pos_c1 Pos_c2 Pos_s1] 1) []])
   (inj []
      (fact Next_state (+ After sampling_period) (+ Before sampling_period) 1 1)
      [SYNC_PERIODIC (+ After sampling_period) 1 1 emulator nil]
   )
   (prb [1 "print" "pgm_cmd_grab_type1_c2 from command:" [Command]])
1) |[]
(ipgm pgm_cmd_grab_h_c2 [] RUN_ALWAYS MAX_TIME VOLATILE NOTIFY 1) []
   [SYNC_ONCE now 0 forever emulator nil 1]

pgm_cmd_grab_h_c2_fail:(pgm [] []
   (ptn (fact G:(goal (fact Command:(cmd grab_type1 [h] ::) Cmd_after: Cmd_before: ::) ::) ::) [])
   (ptn (fact (mk.val e1 emulator_state [nil Pos_h: Pos_c1: Pos_c2: Pos_s1:] :) After: Before: ::) [])
[]
   (= Pos_h Pos_c2)
   (= (is_sim G) false)
   (< Cmd_after Before)
   (> Cmd_before After)
[]
   ; Inject the fact that the command was executed.
   (inj []
      (fact Command (+ After 20ms) Before 1 1)
      [SYNC_ONCE After 1 1 stdin nil]
   )
   (inj [Next_state:(mk.val e1 emulator_state [nil Pos_h Pos_c1 Pos_c2 Pos_s1] 1) []])
   (inj []
      (fact Next_state (+ After sampling_period) (+ Before sampling_period) 1 1)
      [SYNC_PERIODIC (+ After sampling_period) 1 1 emulator nil]
   )
   (prb [1 "print" "pgm_cmd_grab_h_c2_fail from command:" [Command]])
1) |[]
(ipgm pgm_cmd_grab_h_c2_fail [] RUN_ALWAYS MAX_TIME VOLATILE NOTIFY 1) []
   [SYNC_ONCE now 0 forever emulator nil 1]

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; programs for cylinder s1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

pgm_cmd_grab_h_s1:(pgm [] []
   (ptn (fact G:(goal (fact Command:(cmd grab_type1 [h] ::) Cmd_after: Cmd_before: ::) ::) ::) [])
   (ptn (fact (mk.val e1 emulator_state [nil Pos_h: Pos_c1: Pos_c2: Pos_s1:] :) After: Before: ::) [])
[]
   (= Pos_h Pos_s1)
   (= (is_sim G) false)
   (< Cmd_after Before)
   (> Cmd_before After)
[]
   ; Inject the fact that the command was executed.
   (inj []
      (fact Command (+ After 20ms) Before 1 1)
      [SYNC_ONCE After 1 1 stdin nil]
   )
   (inj [Next_state:(mk.val e1 emulator_state [s1 Pos_h Pos_c1 Pos_c2 Pos_s1] 1) []])
   (inj []
      (fact Next_state (+ After sampling_period) (+ Before sampling_period) 1 1)
      [SYNC_PERIODIC (+ After sampling_period) 1 1 emulator nil]
   )
   (prb [1 "print" "pgm_cmd_grab_type1_s1 from command:" [Command]])
1) |[]
(ipgm pgm_cmd_grab_h_s1 [] RUN_ALWAYS MAX_TIME VOLATILE NOTIFY 1) []
   [SYNC_ONCE now 0 forever emulator nil 1]

pgm_cmd_grab_h_s1_fail:(pgm [] []
   (ptn (fact G:(goal (fact Command:(cmd grab_type2 [h] ::) Cmd_after: Cmd_before: ::) ::) ::) [])
   (ptn (fact (mk.val e1 emulator_state [nil Pos_h: Pos_c1: Pos_c2: Pos_s1:] :) After: Before: ::) [])
[]
   (= Pos_h Pos_s1)
   (= (is_sim G) false)
   (< Cmd_after Before)
   (> Cmd_before After)
[]
   ; Inject the fact that the command was executed.
   (inj []
      (fact Command (+ After 20ms) Before 1 1)
      [SYNC_ONCE After 1 1 stdin nil]
   )
   (inj [Next_state:(mk.val e1 emulator_state [nil Pos_h Pos_c1 Pos_c2 Pos_s1] 1) []])
   (inj []
      (fact Next_state (+ After sampling_period) (+ Before sampling_period) 1 1)
      [SYNC_PERIODIC (+ After sampling_period) 1 1 emulator nil]
   )
   (prb [1 "print" "pgm_cmd_grab_h_s1_fail from command:" [Command]])
1) |[]
(ipgm pgm_cmd_grab_h_s1_fail [] RUN_ALWAYS MAX_TIME VOLATILE NOTIFY 1) []
   [SYNC_ONCE now 0 forever emulator nil 1]

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; Match the emulator state and inject individual mk.val at the same time for each of
; the state variables as needed.
pgm_inject_mk_vals_holding:(pgm [] []
   (ptn (fact (mk.val e1 emulator_state [Holding_obj: Pos_h: Pos_c1: Pos_c2: Pos_s1:] :) After: Before: ::) [])
[]
   (<> Holding_obj nil)
[]
   (inj [Val_holding:(mk.val h holding [Holding_obj] 1) []])
   (inj []
      (fact Val_holding After Before 1 1)
      [SYNC_PERIODIC After 1 1 stdin nil]
   )
   (inj [Val_pos_h:(mk.val h position Pos_h 1) []])
   (inj []
      (fact Val_pos_h After Before 1 1)
      [SYNC_PERIODIC After 1 1 stdin nil]
   )
   (inj [Val_pos_c1:(mk.val c1 position Pos_c1 1) []])
   (inj []
      (fact Val_pos_c1 After Before 1 1)
      [SYNC_PERIODIC After 1 1 stdin nil]
   )
   (inj [Val_pos_c2:(mk.val c2 position Pos_c2 1) []])
   (inj []
      (fact Val_pos_c2 After Before 1 1)
      [SYNC_PERIODIC After 1 1 stdin nil]
   )
   (inj [Val_pos_s1:(mk.val s1 position Pos_s1 1) []])
   (inj []
      (fact Val_pos_s1 After Before 1 1)
      [SYNC_PERIODIC After 1 1 stdin nil]
   )
1) |[]
(ipgm pgm_inject_mk_vals_holding [] RUN_ALWAYS MAX_TIME VOLATILE NOTIFY 1) []
   [SYNC_ONCE now 0 forever emulator nil 1]

; The same as pgm_inject_mk_vals_holding for the case when not holding.
pgm_inject_mk_vals_not_holding:(pgm [] []
   (ptn (fact (mk.val e1 emulator_state [nil Pos_h: Pos_c1: Pos_c2: Pos_s1:] :) After: Before: ::) [])
|[]
[]
   (inj [Val_holding:(mk.val h holding [] 1) []])
   (inj []
      (fact Val_holding After Before 1 1)
      [SYNC_PERIODIC After 1 1 stdin nil]
   )
   (inj [Val_pos_h:(mk.val h position Pos_h 1) []])
   (inj []
      (fact Val_pos_h After Before 1 1)
      [SYNC_PERIODIC After 1 1 stdin nil]
   )
   (inj [Val_pos_c1:(mk.val c1 position Pos_c1 1) []])
   (inj []
      (fact Val_pos_c1 After Before 1 1)
      [SYNC_PERIODIC After 1 1 stdin nil]
   )
   (inj [Val_pos_c2:(mk.val c2 position Pos_c2 1) []])
   (inj []
      (fact Val_pos_c2 After Before 1 1)
      [SYNC_PERIODIC After 1 1 stdin nil]
   )
   (inj [Val_pos_s1:(mk.val s1 position Pos_s1 1) []])
   (inj []
      (fact Val_pos_s1 After Before 1 1)
      [SYNC_PERIODIC After 1 1 stdin nil]
   )
1) |[]
(ipgm pgm_inject_mk_vals_not_holding [] RUN_ALWAYS MAX_TIME VOLATILE NOTIFY 1) []
   [SYNC_ONCE now 0 forever emulator nil 1]
