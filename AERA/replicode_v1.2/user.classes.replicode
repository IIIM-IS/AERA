!load std.replicode


; utilities.

!def (std_grp _upr _sln_thr _act_thr _vis_thr _ntf_grps) (grp _upr _sln_thr _act_thr _vis_thr 1 0 1 0 0 1 0 0 1 1 1 1 0 0 0 0 0 0 1 0 1 1 0 1 0 0 _ntf_grps 1); c-salient and c-active.


; domain-dependent classes.

!class (vec3 x:nb y:nb z:nb)
!class (speech_context (_obj {speaker:ent listener:ent}))

!class (Ping (_obj {object:}))
!class (Pong (_obj {object:}))

; device functions.

!dfn (ready :); arg0: a string identifying the external environment to start, arg1: an object.
!dfn (speak :); arg0: a word, arg1: deadline.
!dfn (look_at :); arg0: a vec3, arg1: deadline.
!dfn (point_at :); arg0: a hand, arg1: target position, arg2: deadline.

!dfn (lift_hand :); arg0: a hand, arg1: a distance.
!dfn (grab_hand :); arg0: a hand.
!dfn (release_hand :); arg0: a hand.
!dfn (move_hand :); arg0: a hand, arg1: target position
; Some programs use grab, release and move instead of grab_hand, etc.
!dfn (grab :); arg0: an object.
!dfn (release :); arg0: an object.
!dfn (move :); arg0: an object, arg1: target position
!dfn (set_velocity_y :); arg0: an object, arg1: velocity.
!dfn (set_acceleration_y :); arg0: an object, arg1: acceleration.
!dfn (move_y_plus :); arg0: an object.
!dfn (move_y_minus :); arg0: an object.
!dfn (set_acceleration_y :); arg0: an object, arg1: acceleration.

; The sampling_period should be 2 * base_period, where base_period is from settings.xml.
!def sampling_period 100000us

; application ontology.

; attributes.

essence:(ont 1) [[SYNC_ONCE now 0 forever root nil]]; usage: (mk.val x essence "sphere" 1) or (mk.val x essence sphere 1) if sphere is defined as an entity.
color:(ont 1) [[SYNC_ONCE now 0 forever root nil]]; usage: (mk.val x color "green" 1) or (mk.val x color green 1) if green is defined as an entity.
role:(ont 1) [[SYNC_ONCE now 0 forever root nil]]; usage (mk.val self role interviewer 1)

position:(ont 1) [[SYNC_ONCE now 0 forever root nil]]
position_x:(ont 1) [[SYNC_ONCE now 0 forever root nil]]
position_y:(ont 1) [[SYNC_ONCE now 0 forever root nil]]
position_z:(ont 1) [[SYNC_ONCE now 0 forever root nil]]
velocity_x:(ont 1) [[SYNC_ONCE now 0 forever root nil]]
velocity_y:(ont 1) [[SYNC_ONCE now 0 forever root nil]]
velocity_z:(ont 1) [[SYNC_ONCE now 0 forever root nil]]
acceleration_x:(ont 1) [[SYNC_ONCE now 0 forever root nil]]
acceleration_y:(ont 1) [[SYNC_ONCE now 0 forever root nil]]
acceleration_z:(ont 1) [[SYNC_ONCE now 0 forever root nil]]
theta_x:(ont 1) [[SYNC_ONCE now 0 forever root nil]]
theta_y:(ont 1) [[SYNC_ONCE now 0 forever root nil]]
theta_z:(ont 1) [[SYNC_ONCE now 0 forever root nil]]
omega_x:(ont 1) [[SYNC_ONCE now 0 forever root nil]]
omega_y:(ont 1) [[SYNC_ONCE now 0 forever root nil]]
omega_z:(ont 1) [[SYNC_ONCE now 0 forever root nil]]


attachment:(ont 1) [[SYNC_ONCE now 0 forever root nil]]; usage: (mk.val self_right_hand attachment a_thing 1)
spoken:(ont 1) [[SYNC_ONCE now 0 forever root nil]]; usage: (mk.val an_actor spoken a_sentence 1)
pointed_at:(ont 1) [[SYNC_ONCE now 0 forever root nil]]; usage: (mk.val an_actor pointed_at a_location 1)
looked_at:(ont 1) [[SYNC_ONCE now 0 forever root nil]]; usage: (mk.val an_actor looked_at a_location 1)

knowing:(ont 1) [[SYNC_ONCE now 0 forever root nil]]; usage: (mk.val an_actor knowing something 1)
most_salient:(ont 1) [[SYNC_ONCE now 0 forever root nil]]


; values.

actor:(ont 1) [[SYNC_ONCE now 0 forever root nil]]
interviewer:(ont 1) [[SYNC_ONCE now 0 forever root nil]]
interviewee:(ont 1) [[SYNC_ONCE now 0 forever root nil]]
hand:(ont 1) [[SYNC_ONCE now 0 forever root nil]]
head:(ont 1) [[SYNC_ONCE now 0 forever root nil]]
cube:(ont 1) [[SYNC_ONCE now 1 forever root nil]]
sphere:(ont 1) [[SYNC_ONCE now 1 forever root nil]]
