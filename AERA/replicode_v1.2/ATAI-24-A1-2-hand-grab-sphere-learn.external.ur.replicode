; AGI-13 Summer School - AERA 6. Example by Eric Nivel.
; https://www.youtube.com/watch?v=LDbOHxUtVlU&t=5561
; A robotic arm is holding a cube and needs to put a sphere somewhere.
; It has only one hand; effectors: move, grab, release.
; ontology: essence ("is a"), position, holding.
; inputs: position, holding, efferent copies of commands.

h:(ent 1) [[SYNC_ONCE now 1 forever root nil]]
h_is_a_hand:(mk.val h essence hand 1) |[]
(fact h_is_a_hand 0s:0ms:0us GIGASEC 1 1) [[SYNC_AXIOM now 1 forever stdin nil]]

b_0:(ent 1) [[SYNC_ONCE now 1 forever root nil]]
b_0_is_a_cube:(mk.val b_0 essence cube 1) |[]
(fact b_0_is_a_cube 0s:0ms:0us GIGASEC 1 1) [[SYNC_AXIOM now 1 forever stdin nil]]
b_0_is_a_hand:(mk.val b_0 essence hand 1) |[]
; This is needed for S3.
(|fact b_0_is_a_hand 0s:0ms:0us GIGASEC 1 1) [[SYNC_AXIOM now 1 forever stdin nil]]

b_1:(ent 1) [[SYNC_ONCE now 1 forever root nil]]
b_1_is_a_sphere:(mk.val b_1 essence sphere 1) |[]
(fact b_1_is_a_sphere 0s:0ms:0us GIGASEC 1 1) [[SYNC_AXIOM now 1 forever stdin nil]]
b_1_is_a_hand:(mk.val b_1 essence hand 1) |[]
; This is needed for S3.
(|fact b_1_is_a_hand 0s:0ms:0us GIGASEC 1 1) [[SYNC_AXIOM now 1 forever stdin nil]]

b_2:(ent 1) [[SYNC_ONCE now 1 forever root nil]]
b_2_is_a_cube:(mk.val b_2 essence cube 1) |[]
(fact b_2_is_a_cube 0s:0ms:0us GIGASEC 1 1) [[SYNC_AXIOM now 1 forever stdin nil]]
b_2_is_a_hand:(mk.val b_2 essence hand 1) |[]
; This is needed for S3.
(|fact b_2_is_a_hand 0s:0ms:0us GIGASEC 1 1) [[SYNC_AXIOM now 1 forever stdin nil]]

; Hand H has position P.
S0:(cst [] []
   (fact (mk.val H: essence hand :) T0: T1: : :); Changed X to hand.
   (fact (mk.val H: position P: :) T0: T1: : :)
|[]
|[]
[stdin] 1) [[SYNC_ONCE now 0 forever primary nil 1]]

; A thing C of kind X occupies position P. (Modified to exclude when C is a hand.)
S3:(cst [] []
   (fact (mk.val C: essence X: :) T0: T1: : :)
   (fact (mk.val C: position P: :) T0: T1: : :)
   (|fact (mk.val C: essence hand :) T0: T1: : :); Don't duplicate S0, which is for hands.
|[]
|[]
[stdin] 1) [[SYNC_ONCE now 0 forever primary nil 1]]

!def pS1 (vec3 -0.5 0.5 0)

; Execute babble pass A commands.
!def DRIVE_START 1000ms

start:(pgm [] [] [] []
   (cmd ready ["hand-grab-sphere"] 1)
1) |[]
(ipgm start [] RUN_ONCE 0s VOLATILE NOTIFY 1) [[SYNC_ONCE now 0 forever stdin nil 1]]

m_drive:(mdl [] []
   ; The goal target timings are the same as the drive timings.
   (fact (mk.val b_1 position pS1 1) T0: T1: 1 1)
   (fact run T0: T1: ::)
|[]
|[]
[stdin drives] 1 1 1 0 1) [[SYNC_ONCE now 0 forever primary nil 1]]

pgm_babbleA_1:(pgm [] []
   ; This fact repeats periodically. We use it as a "heartbeat".
   (ptn (fact (mk.val h position : :) After: Before: ::) [])
[]
   (>= After (+ this.vw.ijt 100ms))
[]
   ; Move where initial and final positions have no objects so that they are not correlated.
   (inj [Command:(cmd move [h (vec3 -2.2 0 0)] 1) []])
   (inj [F_Command:(fact Command After Before 1 1) []])
   (inj [G:(goal F_Command self nil 1) []])
   (inj []
      ; Delay a little to allow predictions for this sampling period before processing.
      (fact G T0:(+ After 10ms) T0 1 1)
      [SYNC_ONCE T0 1 forever primary nil]
   )
   (prb [1 "print" "injected (cmd move [h (vec3 -2.2 0 0)])" []])
1) |[]
(ipgm pgm_babbleA_1 [] RUN_ONCE MAX_TIME VOLATILE NOTIFY 1) []
   [SYNC_ONCE now 0 forever primary nil 1]

pgm_babbleA_2:(pgm [] []
   ; This fact repeats periodically. We use it as a "heartbeat".
   (ptn (fact (mk.val h position : :) After: Before: ::) [])
[]
   (>= After (+ this.vw.ijt 200ms))
[]
   ; Now move to the sphere.
   (inj [Command:(cmd move [h (vec3 1 0.5 0)] 1) []])
   (inj [F_Command:(fact Command After Before 1 1) []])
   (inj [G:(goal F_Command self nil 1) []])
   (inj []
      ; Delay a little to allow predictions for this sampling period before processing.
      (fact G T0:(+ After 10ms) T0 1 1)
      [SYNC_ONCE T0 1 forever primary nil]
   )
   (prb [1 "print" "injected (cmd move [h (vec3 1 0.5 0)])" []])
1) |[]
(ipgm pgm_babbleA_2 [] RUN_ONCE MAX_TIME VOLATILE NOTIFY 1) []
   [SYNC_ONCE now 0 forever primary nil 1]

pgm_babbleA_3:(pgm [] []
   ; This fact repeats periodically. We use it as a "heartbeat".
   (ptn (fact (mk.val h position : :) After: Before: ::) [])
[]
   (>= After (+ this.vw.ijt 300ms))
[]
   ; Grab the sphere.
   (inj [Command:(cmd grab [h] 1) []])
   (inj [F_Command:(fact Command After Before 1 1) []])
   (inj [G:(goal F_Command self nil 1) []])
   (inj []
      ; Delay a little to allow predictions for this sampling period before processing.
      (fact G T0:(+ After 10ms) T0 1 1)
      [SYNC_ONCE T0 1 forever primary nil]
   )
   (prb [1 "print" "injected (cmd grab [h])" []])
1) |[]
(ipgm pgm_babbleA_3 [] RUN_ONCE MAX_TIME VOLATILE NOTIFY 1) []
   [SYNC_ONCE now 0 forever primary nil 1]

pgm_babbleA_4:(pgm [] []
   ; This fact repeats periodically. We use it as a "heartbeat".
   (ptn (fact (mk.val h position : :) After: Before: ::) [])
[]
   (>= After (+ this.vw.ijt 400ms))
[]
   ; Release the sphere to learn the release model and the "holding" cst.
   (inj [Command:(cmd release [h] 1) []])
   (inj [F_Command:(fact Command After Before 1 1) []])
   (inj [G:(goal F_Command self nil 1) []])
   (inj []
      ; Delay a little to allow predictions for this sampling period before processing.
      (fact G T0:(+ After 10ms) T0 1 1)
      [SYNC_ONCE T0 1 forever primary nil]
   )
   (prb [1 "print" "injected (cmd release [h])" []])
1) |[]
(ipgm pgm_babbleA_4 [] RUN_ONCE MAX_TIME VOLATILE NOTIFY 1) []
   [SYNC_ONCE now 0 forever primary nil 1]

pgm_babbleA_5:(pgm [] []
   ; This fact repeats periodically. We use it as a "heartbeat".
   (ptn (fact (mk.val h position : :) After: Before: ::) [])
[]
   (>= After (+ this.vw.ijt 500ms))
[]
   ; Grab the sphere again so we can move while holding it.
   (inj [Command:(cmd grab [h] 1) []])
   (inj [F_Command:(fact Command After Before 1 1) []])
   (inj [G:(goal F_Command self nil 1) []])
   (inj []
      ; Delay a little to allow predictions for this sampling period before processing.
      (fact G T0:(+ After 10ms) T0 1 1)
      [SYNC_ONCE T0 1 forever primary nil]
   )
   (prb [1 "print" "injected (cmd grab [h])" []])
1) |[]
(ipgm pgm_babbleA_5 [] RUN_ONCE MAX_TIME VOLATILE NOTIFY 1) []
   [SYNC_ONCE now 0 forever primary nil 1]

pgm_babbleA_6:(pgm [] []
   ; This fact repeats periodically. We use it as a "heartbeat".
   (ptn (fact (mk.val h position : :) After: Before: ::) [])
[]
   (>= After (+ this.vw.ijt 600ms))
[]
   ; Move while holding the sphere to learn the re-use model.
   (inj [Command:(cmd move [h (vec3 0.5 -0.2 0)] 1) []])
   (inj [F_Command:(fact Command After Before 1 1) []])
   (inj [G:(goal F_Command self nil 1) []])
   (inj []
      ; Delay a little to allow predictions for this sampling period before processing.
      (fact G T0:(+ After 10ms) T0 1 1)
      [SYNC_ONCE T0 1 forever primary nil]
   )
   (prb [1 "print" "injected (cmd move [h (vec3 0.5 -0.2 0)])" []])
1) |[]
(ipgm pgm_babbleA_6 [] RUN_ONCE MAX_TIME VOLATILE NOTIFY 1) []
   [SYNC_ONCE now 0 forever primary nil 1]

pgm_babbleA_7:(pgm [] []
   ; This fact repeats periodically. We use it as a "heartbeat".
   (ptn (fact (mk.val h position : :) After: Before: ::) [])
[]
   (>= After (+ this.vw.ijt 700ms))
[]
   ; Move while holding the sphere to learn the re-use model.
   (inj [Command:(cmd move [h (vec3 -0.5 0.2 0)] 1) []])
   (inj [F_Command:(fact Command After Before 1 1) []])
   (inj [G:(goal F_Command self nil 1) []])
   (inj []
      ; Delay a little to allow predictions for this sampling period before processing.
      (fact G T0:(+ After 10ms) T0 1 1)
      [SYNC_ONCE T0 1 forever primary nil]
   )
   (prb [1 "print" "injected (cmd move [h (vec3 -0.5 0.2 0)])" []])
1) |[]
(ipgm pgm_babbleA_7 [] RUN_ONCE MAX_TIME VOLATILE NOTIFY 1) []
   [SYNC_ONCE now 0 forever primary nil 1]

pgm_babbleA_8:(pgm [] []
   ; This fact repeats periodically. We use it as a "heartbeat".
   (ptn (fact (mk.val h position : :) After: Before: ::) [])
[]
   (>= After (+ this.vw.ijt 800ms))
[]
   ; Release the sphere in the initial position for the task.
   (inj [Command:(cmd release [h] 1) []])
   (inj [F_Command:(fact Command After Before 1 1) []])
   (inj [G:(goal F_Command self nil 1) []])
   (inj []
      ; Delay a little to allow predictions for this sampling period before processing.
      (fact G T0:(+ After 10ms) T0 1 1)
      [SYNC_ONCE T0 1 forever primary nil]
   )
   (prb [1 "print" "injected (cmd release [h])" []])
1) |[]
(ipgm pgm_babbleA_8 [] RUN_ONCE MAX_TIME VOLATILE NOTIFY 1) []
   [SYNC_ONCE now 0 forever primary nil 1]

pgm_babbleA_9:(pgm [] []
   ; This fact repeats periodically. We use it as a "heartbeat".
   (ptn (fact (mk.val h position : :) After: Before: ::) [])
[]
   (>= After (+ this.vw.ijt 900ms))
[]
   ; Move to the cube.
   (inj [Command:(cmd move [h (vec3 -0.5 0 0)] 1) []])
   (inj [F_Command:(fact Command After Before 1 1) []])
   (inj [G:(goal F_Command self nil 1) []])
   (inj []
      ; Delay a little to allow predictions for this sampling period before processing.
      (fact G T0:(+ After 10ms) T0 1 1)
      [SYNC_ONCE T0 1 forever primary nil]
   )
   (prb [1 "print" "injected (cmd move [h (vec3 -0.5 0 0)])" []])
1) |[]
(ipgm pgm_babbleA_9 [] RUN_ONCE MAX_TIME VOLATILE NOTIFY 1) []
   [SYNC_ONCE now 0 forever primary nil 1]

   
; ##################################################################################################################################
; ######################################### PROGRAM TO INJECT DRIVE AFTER BABBLING #################################################
; ##################################################################################################################################

pgm_inject_drive_pass1:(pgm [] []
   ; This fact repeats periodically. We use it as a "heartbeat".
   (ptn (fact (mk.val h position : :) After: Before: ::) [])
[]
   (>= After (+ this.vw.ijt DRIVE_START))
[]
   ; The end of the time interval will be used in m_drive as the end of the goal interval.
   (inj [F_run:(fact run After (+ Before 500ms) 1 1) []])
   (inj [G:(goal F_run self nil 1) []])
   (inj []
      ; Delay a little to allow predictions for this sampling period before injecting the drive.
      (fact G T0:(+ After 10ms) T0 1 1)
      [SYNC_ONCE T0 1 forever primary nil]
   )
   (prb [1 "print" "injected drive" []])
1) |[]
(ipgm pgm_inject_drive_pass1 [] RUN_ALWAYS MAX_TIME VOLATILE NOTIFY 1) []
   [SYNC_ONCE now 0 forever primary nil 1]


   
; ##################################################################################################################################
; ########################################## FROM HERE PROGRAMS TO EJECT COMMANDS ##################################################
; ##################################################################################################################################

pgm_eject_cmd_move:(pgm [] []
   (ptn (fact G:(goal (fact (cmd move [H: D:] :) ::) ::) ::) [])
[]
   ; Only eject non-simulation goals.
   (= (is_sim G) false)
[]
   (cmd move [H D] 1)
1) |[]
(ipgm pgm_eject_cmd_move [] RUN_ALWAYS MAX_TIME VOLATILE NOTIFY 1) []
   [SYNC_ONCE now 0 forever primary nil 1]

pgm_eject_cmd_grab:(pgm [] []
   (ptn (fact G:(goal (fact (cmd grab [H:] :) ::) ::) ::) [])
[]
   ; Only eject non-simulation goals.
   (= (is_sim G) false)
[]
   (cmd grab [H] 1)
1) |[]
(ipgm pgm_eject_cmd_grab [] RUN_ALWAYS MAX_TIME VOLATILE NOTIFY 1) []
   [SYNC_ONCE now 0 forever primary nil 1]

pgm_eject_cmd_release:(pgm [] []
   (ptn (fact G:(goal (fact (cmd release [H:] :) ::) ::) ::) [])
[]
   ; Only eject non-simulation goals.
   (= (is_sim G) false)
[]
   (cmd release [H] 1)
1) |[]
(ipgm pgm_eject_cmd_release [] RUN_ALWAYS MAX_TIME VOLATILE NOTIFY 1) []
   [SYNC_ONCE now 0 forever primary nil 1]
