// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tcp_data_message.proto

#ifdef ENABLE_PROTOBUF

#include "tcp_data_message.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace tcp_io_device {
PROTOBUF_CONSTEXPR TCPMessage::TCPMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.timestamp_)*/uint64_t{0u}
  , /*decltype(_impl_.messagetype_)*/0
  , /*decltype(_impl_.message_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct TCPMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TCPMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TCPMessageDefaultTypeInternal() {}
  union {
    TCPMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TCPMessageDefaultTypeInternal _TCPMessage_default_instance_;
PROTOBUF_CONSTEXPR StartMessage::StartMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.diagnosticmode_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StartMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StartMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StartMessageDefaultTypeInternal() {}
  union {
    StartMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StartMessageDefaultTypeInternal _StartMessage_default_instance_;
PROTOBUF_CONSTEXPR StopMessage::StopMessage(
    ::_pbi::ConstantInitialized) {}
struct StopMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StopMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StopMessageDefaultTypeInternal() {}
  union {
    StopMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StopMessageDefaultTypeInternal _StopMessage_default_instance_;
PROTOBUF_CONSTEXPR SetupMessage_EntitiesEntry_DoNotUse::SetupMessage_EntitiesEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct SetupMessage_EntitiesEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetupMessage_EntitiesEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetupMessage_EntitiesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    SetupMessage_EntitiesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetupMessage_EntitiesEntry_DoNotUseDefaultTypeInternal _SetupMessage_EntitiesEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR SetupMessage_ObjectsEntry_DoNotUse::SetupMessage_ObjectsEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct SetupMessage_ObjectsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetupMessage_ObjectsEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetupMessage_ObjectsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    SetupMessage_ObjectsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetupMessage_ObjectsEntry_DoNotUseDefaultTypeInternal _SetupMessage_ObjectsEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR SetupMessage_CommandsEntry_DoNotUse::SetupMessage_CommandsEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct SetupMessage_CommandsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetupMessage_CommandsEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetupMessage_CommandsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    SetupMessage_CommandsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetupMessage_CommandsEntry_DoNotUseDefaultTypeInternal _SetupMessage_CommandsEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR SetupMessage::SetupMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.entities_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.objects_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.commands_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.commanddescriptions_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SetupMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetupMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetupMessageDefaultTypeInternal() {}
  union {
    SetupMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetupMessageDefaultTypeInternal _SetupMessage_default_instance_;
PROTOBUF_CONSTEXPR CommandDescription::CommandDescription(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.description_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CommandDescriptionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandDescriptionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandDescriptionDefaultTypeInternal() {}
  union {
    CommandDescription _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandDescriptionDefaultTypeInternal _CommandDescription_default_instance_;
PROTOBUF_CONSTEXPR DataMessage::DataMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.variables_)*/{}
  , /*decltype(_impl_.timespan_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DataMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DataMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DataMessageDefaultTypeInternal() {}
  union {
    DataMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DataMessageDefaultTypeInternal _DataMessage_default_instance_;
PROTOBUF_CONSTEXPR VariableDescription::VariableDescription(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.dimensions_)*/{}
  , /*decltype(_impl_._dimensions_cached_byte_size_)*/{0}
  , /*decltype(_impl_.entityid_)*/0
  , /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_.datatype_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct VariableDescriptionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VariableDescriptionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VariableDescriptionDefaultTypeInternal() {}
  union {
    VariableDescription _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VariableDescriptionDefaultTypeInternal _VariableDescription_default_instance_;
PROTOBUF_CONSTEXPR ProtoVariable::ProtoVariable(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.metadata_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ProtoVariableDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProtoVariableDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProtoVariableDefaultTypeInternal() {}
  union {
    ProtoVariable _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProtoVariableDefaultTypeInternal _ProtoVariable_default_instance_;
}  // namespace tcp_io_device
static ::_pb::Metadata file_level_metadata_tcp_5fdata_5fmessage_2eproto[11];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_tcp_5fdata_5fmessage_2eproto[2];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_tcp_5fdata_5fmessage_2eproto = nullptr;

const uint32_t TableStruct_tcp_5fdata_5fmessage_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tcp_io_device::TCPMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::tcp_io_device::TCPMessage, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tcp_io_device::TCPMessage, _impl_.messagetype_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::tcp_io_device::TCPMessage, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::tcp_io_device::TCPMessage, _impl_.message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tcp_io_device::StartMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tcp_io_device::StartMessage, _impl_.diagnosticmode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tcp_io_device::StopMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tcp_io_device::SetupMessage_EntitiesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::tcp_io_device::SetupMessage_EntitiesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tcp_io_device::SetupMessage_EntitiesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::tcp_io_device::SetupMessage_EntitiesEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::tcp_io_device::SetupMessage_ObjectsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::tcp_io_device::SetupMessage_ObjectsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tcp_io_device::SetupMessage_ObjectsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::tcp_io_device::SetupMessage_ObjectsEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::tcp_io_device::SetupMessage_CommandsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::tcp_io_device::SetupMessage_CommandsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tcp_io_device::SetupMessage_CommandsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::tcp_io_device::SetupMessage_CommandsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tcp_io_device::SetupMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tcp_io_device::SetupMessage, _impl_.entities_),
  PROTOBUF_FIELD_OFFSET(::tcp_io_device::SetupMessage, _impl_.objects_),
  PROTOBUF_FIELD_OFFSET(::tcp_io_device::SetupMessage, _impl_.commands_),
  PROTOBUF_FIELD_OFFSET(::tcp_io_device::SetupMessage, _impl_.commanddescriptions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tcp_io_device::CommandDescription, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tcp_io_device::CommandDescription, _impl_.description_),
  PROTOBUF_FIELD_OFFSET(::tcp_io_device::CommandDescription, _impl_.name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tcp_io_device::DataMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tcp_io_device::DataMessage, _impl_.variables_),
  PROTOBUF_FIELD_OFFSET(::tcp_io_device::DataMessage, _impl_.timespan_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tcp_io_device::VariableDescription, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tcp_io_device::VariableDescription, _impl_.entityid_),
  PROTOBUF_FIELD_OFFSET(::tcp_io_device::VariableDescription, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::tcp_io_device::VariableDescription, _impl_.datatype_),
  PROTOBUF_FIELD_OFFSET(::tcp_io_device::VariableDescription, _impl_.dimensions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tcp_io_device::ProtoVariable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tcp_io_device::ProtoVariable, _impl_.metadata_),
  PROTOBUF_FIELD_OFFSET(::tcp_io_device::ProtoVariable, _impl_.data_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::tcp_io_device::TCPMessage)},
  { 13, -1, -1, sizeof(::tcp_io_device::StartMessage)},
  { 20, -1, -1, sizeof(::tcp_io_device::StopMessage)},
  { 26, 34, -1, sizeof(::tcp_io_device::SetupMessage_EntitiesEntry_DoNotUse)},
  { 36, 44, -1, sizeof(::tcp_io_device::SetupMessage_ObjectsEntry_DoNotUse)},
  { 46, 54, -1, sizeof(::tcp_io_device::SetupMessage_CommandsEntry_DoNotUse)},
  { 56, -1, -1, sizeof(::tcp_io_device::SetupMessage)},
  { 66, -1, -1, sizeof(::tcp_io_device::CommandDescription)},
  { 74, -1, -1, sizeof(::tcp_io_device::DataMessage)},
  { 82, -1, -1, sizeof(::tcp_io_device::VariableDescription)},
  { 92, -1, -1, sizeof(::tcp_io_device::ProtoVariable)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::tcp_io_device::_TCPMessage_default_instance_._instance,
  &::tcp_io_device::_StartMessage_default_instance_._instance,
  &::tcp_io_device::_StopMessage_default_instance_._instance,
  &::tcp_io_device::_SetupMessage_EntitiesEntry_DoNotUse_default_instance_._instance,
  &::tcp_io_device::_SetupMessage_ObjectsEntry_DoNotUse_default_instance_._instance,
  &::tcp_io_device::_SetupMessage_CommandsEntry_DoNotUse_default_instance_._instance,
  &::tcp_io_device::_SetupMessage_default_instance_._instance,
  &::tcp_io_device::_CommandDescription_default_instance_._instance,
  &::tcp_io_device::_DataMessage_default_instance_._instance,
  &::tcp_io_device::_VariableDescription_default_instance_._instance,
  &::tcp_io_device::_ProtoVariable_default_instance_._instance,
};

const char descriptor_table_protodef_tcp_5fdata_5fmessage_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\026tcp_data_message.proto\022\rtcp_io_device\""
  "\341\002\n\nTCPMessage\0223\n\013messageType\030\001 \001(\0162\036.tc"
  "p_io_device.TCPMessage.Type\0223\n\014setupMess"
  "age\030\002 \001(\0132\033.tcp_io_device.SetupMessageH\000"
  "\0221\n\013dataMessage\030\003 \001(\0132\032.tcp_io_device.Da"
  "taMessageH\000\0223\n\014startMessage\030\004 \001(\0132\033.tcp_"
  "io_device.StartMessageH\000\0221\n\013stopMessage\030"
  "\005 \001(\0132\032.tcp_io_device.StopMessageH\000\022\021\n\tt"
  "imestamp\030\006 \001(\004\"0\n\004Type\022\t\n\005SETUP\020\000\022\010\n\004DAT"
  "A\020\001\022\t\n\005START\020\002\022\010\n\004STOP\020\003B\t\n\007message\"&\n\014S"
  "tartMessage\022\026\n\016diagnosticMode\030\001 \001(\010\"\r\n\013S"
  "topMessage\"\225\003\n\014SetupMessage\022;\n\010entities\030"
  "\001 \003(\0132).tcp_io_device.SetupMessage.Entit"
  "iesEntry\0229\n\007objects\030\002 \003(\0132(.tcp_io_devic"
  "e.SetupMessage.ObjectsEntry\022;\n\010commands\030"
  "\003 \003(\0132).tcp_io_device.SetupMessage.Comma"
  "ndsEntry\022>\n\023commandDescriptions\030\004 \003(\0132!."
  "tcp_io_device.CommandDescription\032/\n\rEnti"
  "tiesEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\005:\0028"
  "\001\032.\n\014ObjectsEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030"
  "\002 \001(\005:\0028\001\032/\n\rCommandsEntry\022\013\n\003key\030\001 \001(\t\022"
  "\r\n\005value\030\002 \001(\005:\0028\001\"[\n\022CommandDescription"
  "\0227\n\013description\030\001 \001(\0132\".tcp_io_device.Va"
  "riableDescription\022\014\n\004name\030\002 \001(\t\"P\n\013DataM"
  "essage\022/\n\tvariables\030\001 \003(\0132\034.tcp_io_devic"
  "e.ProtoVariable\022\020\n\010timeSpan\030\002 \001(\004\"\340\001\n\023Va"
  "riableDescription\022\020\n\010entityID\030\001 \001(\005\022\n\n\002I"
  "D\030\002 \001(\005\022=\n\010dataType\030\003 \001(\0162+.tcp_io_devic"
  "e.VariableDescription.DataType\022\022\n\ndimens"
  "ions\030\004 \003(\004\"X\n\010DataType\022\n\n\006DOUBLE\020\000\022\t\n\005IN"
  "T64\020\003\022\010\n\004BOOL\020\014\022\n\n\006STRING\020\r\022\t\n\005BYTES\020\016\022\024"
  "\n\020COMMUNICATION_ID\020\017\"S\n\rProtoVariable\0224\n"
  "\010metaData\030\001 \001(\0132\".tcp_io_device.Variable"
  "Description\022\014\n\004data\030\002 \001(\014b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_tcp_5fdata_5fmessage_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_tcp_5fdata_5fmessage_2eproto = {
    false, false, 1353, descriptor_table_protodef_tcp_5fdata_5fmessage_2eproto,
    "tcp_data_message.proto",
    &descriptor_table_tcp_5fdata_5fmessage_2eproto_once, nullptr, 0, 11,
    schemas, file_default_instances, TableStruct_tcp_5fdata_5fmessage_2eproto::offsets,
    file_level_metadata_tcp_5fdata_5fmessage_2eproto, file_level_enum_descriptors_tcp_5fdata_5fmessage_2eproto,
    file_level_service_descriptors_tcp_5fdata_5fmessage_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_tcp_5fdata_5fmessage_2eproto_getter() {
  return &descriptor_table_tcp_5fdata_5fmessage_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_tcp_5fdata_5fmessage_2eproto(&descriptor_table_tcp_5fdata_5fmessage_2eproto);
namespace tcp_io_device {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TCPMessage_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_tcp_5fdata_5fmessage_2eproto);
  return file_level_enum_descriptors_tcp_5fdata_5fmessage_2eproto[0];
}
bool TCPMessage_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr TCPMessage_Type TCPMessage::SETUP;
constexpr TCPMessage_Type TCPMessage::DATA;
constexpr TCPMessage_Type TCPMessage::START;
constexpr TCPMessage_Type TCPMessage::STOP;
constexpr TCPMessage_Type TCPMessage::Type_MIN;
constexpr TCPMessage_Type TCPMessage::Type_MAX;
constexpr int TCPMessage::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VariableDescription_DataType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_tcp_5fdata_5fmessage_2eproto);
  return file_level_enum_descriptors_tcp_5fdata_5fmessage_2eproto[1];
}
bool VariableDescription_DataType_IsValid(int value) {
  switch (value) {
    case 0:
    case 3:
    case 12:
    case 13:
    case 14:
    case 15:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr VariableDescription_DataType VariableDescription::DOUBLE;
constexpr VariableDescription_DataType VariableDescription::INT64;
constexpr VariableDescription_DataType VariableDescription::BOOL;
constexpr VariableDescription_DataType VariableDescription::STRING;
constexpr VariableDescription_DataType VariableDescription::BYTES;
constexpr VariableDescription_DataType VariableDescription::COMMUNICATION_ID;
constexpr VariableDescription_DataType VariableDescription::DataType_MIN;
constexpr VariableDescription_DataType VariableDescription::DataType_MAX;
constexpr int VariableDescription::DataType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class TCPMessage::_Internal {
 public:
  static const ::tcp_io_device::SetupMessage& setupmessage(const TCPMessage* msg);
  static const ::tcp_io_device::DataMessage& datamessage(const TCPMessage* msg);
  static const ::tcp_io_device::StartMessage& startmessage(const TCPMessage* msg);
  static const ::tcp_io_device::StopMessage& stopmessage(const TCPMessage* msg);
};

const ::tcp_io_device::SetupMessage&
TCPMessage::_Internal::setupmessage(const TCPMessage* msg) {
  return *msg->_impl_.message_.setupmessage_;
}
const ::tcp_io_device::DataMessage&
TCPMessage::_Internal::datamessage(const TCPMessage* msg) {
  return *msg->_impl_.message_.datamessage_;
}
const ::tcp_io_device::StartMessage&
TCPMessage::_Internal::startmessage(const TCPMessage* msg) {
  return *msg->_impl_.message_.startmessage_;
}
const ::tcp_io_device::StopMessage&
TCPMessage::_Internal::stopmessage(const TCPMessage* msg) {
  return *msg->_impl_.message_.stopmessage_;
}
void TCPMessage::set_allocated_setupmessage(::tcp_io_device::SetupMessage* setupmessage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (setupmessage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(setupmessage);
    if (message_arena != submessage_arena) {
      setupmessage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, setupmessage, submessage_arena);
    }
    set_has_setupmessage();
    _impl_.message_.setupmessage_ = setupmessage;
  }
  // @@protoc_insertion_point(field_set_allocated:tcp_io_device.TCPMessage.setupMessage)
}
void TCPMessage::set_allocated_datamessage(::tcp_io_device::DataMessage* datamessage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (datamessage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(datamessage);
    if (message_arena != submessage_arena) {
      datamessage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, datamessage, submessage_arena);
    }
    set_has_datamessage();
    _impl_.message_.datamessage_ = datamessage;
  }
  // @@protoc_insertion_point(field_set_allocated:tcp_io_device.TCPMessage.dataMessage)
}
void TCPMessage::set_allocated_startmessage(::tcp_io_device::StartMessage* startmessage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (startmessage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(startmessage);
    if (message_arena != submessage_arena) {
      startmessage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, startmessage, submessage_arena);
    }
    set_has_startmessage();
    _impl_.message_.startmessage_ = startmessage;
  }
  // @@protoc_insertion_point(field_set_allocated:tcp_io_device.TCPMessage.startMessage)
}
void TCPMessage::set_allocated_stopmessage(::tcp_io_device::StopMessage* stopmessage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (stopmessage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(stopmessage);
    if (message_arena != submessage_arena) {
      stopmessage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stopmessage, submessage_arena);
    }
    set_has_stopmessage();
    _impl_.message_.stopmessage_ = stopmessage;
  }
  // @@protoc_insertion_point(field_set_allocated:tcp_io_device.TCPMessage.stopMessage)
}
TCPMessage::TCPMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tcp_io_device.TCPMessage)
}
TCPMessage::TCPMessage(const TCPMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TCPMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.timestamp_){}
    , decltype(_impl_.messagetype_){}
    , decltype(_impl_.message_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.timestamp_, &from._impl_.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.messagetype_) -
    reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.messagetype_));
  clear_has_message();
  switch (from.message_case()) {
    case kSetupMessage: {
      _this->_internal_mutable_setupmessage()->::tcp_io_device::SetupMessage::MergeFrom(
          from._internal_setupmessage());
      break;
    }
    case kDataMessage: {
      _this->_internal_mutable_datamessage()->::tcp_io_device::DataMessage::MergeFrom(
          from._internal_datamessage());
      break;
    }
    case kStartMessage: {
      _this->_internal_mutable_startmessage()->::tcp_io_device::StartMessage::MergeFrom(
          from._internal_startmessage());
      break;
    }
    case kStopMessage: {
      _this->_internal_mutable_stopmessage()->::tcp_io_device::StopMessage::MergeFrom(
          from._internal_stopmessage());
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:tcp_io_device.TCPMessage)
}

inline void TCPMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.timestamp_){uint64_t{0u}}
    , decltype(_impl_.messagetype_){0}
    , decltype(_impl_.message_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_message();
}

TCPMessage::~TCPMessage() {
  // @@protoc_insertion_point(destructor:tcp_io_device.TCPMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TCPMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_message()) {
    clear_message();
  }
}

void TCPMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TCPMessage::clear_message() {
// @@protoc_insertion_point(one_of_clear_start:tcp_io_device.TCPMessage)
  switch (message_case()) {
    case kSetupMessage: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.setupmessage_;
      }
      break;
    }
    case kDataMessage: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.datamessage_;
      }
      break;
    }
    case kStartMessage: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.startmessage_;
      }
      break;
    }
    case kStopMessage: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.message_.stopmessage_;
      }
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = MESSAGE_NOT_SET;
}


void TCPMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:tcp_io_device.TCPMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.messagetype_) -
      reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.messagetype_));
  clear_message();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TCPMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tcp_io_device.TCPMessage.Type messageType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_messagetype(static_cast<::tcp_io_device::TCPMessage_Type>(val));
        } else
          goto handle_unusual;
        continue;
      // .tcp_io_device.SetupMessage setupMessage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_setupmessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tcp_io_device.DataMessage dataMessage = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_datamessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tcp_io_device.StartMessage startMessage = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_startmessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tcp_io_device.StopMessage stopMessage = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_stopmessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 timestamp = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TCPMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tcp_io_device.TCPMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .tcp_io_device.TCPMessage.Type messageType = 1;
  if (this->_internal_messagetype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_messagetype(), target);
  }

  // .tcp_io_device.SetupMessage setupMessage = 2;
  if (_internal_has_setupmessage()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::setupmessage(this),
        _Internal::setupmessage(this).GetCachedSize(), target, stream);
  }

  // .tcp_io_device.DataMessage dataMessage = 3;
  if (_internal_has_datamessage()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::datamessage(this),
        _Internal::datamessage(this).GetCachedSize(), target, stream);
  }

  // .tcp_io_device.StartMessage startMessage = 4;
  if (_internal_has_startmessage()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::startmessage(this),
        _Internal::startmessage(this).GetCachedSize(), target, stream);
  }

  // .tcp_io_device.StopMessage stopMessage = 5;
  if (_internal_has_stopmessage()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::stopmessage(this),
        _Internal::stopmessage(this).GetCachedSize(), target, stream);
  }

  // uint64 timestamp = 6;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(6, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tcp_io_device.TCPMessage)
  return target;
}

size_t TCPMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tcp_io_device.TCPMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 timestamp = 6;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_timestamp());
  }

  // .tcp_io_device.TCPMessage.Type messageType = 1;
  if (this->_internal_messagetype() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_messagetype());
  }

  switch (message_case()) {
    // .tcp_io_device.SetupMessage setupMessage = 2;
    case kSetupMessage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.setupmessage_);
      break;
    }
    // .tcp_io_device.DataMessage dataMessage = 3;
    case kDataMessage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.datamessage_);
      break;
    }
    // .tcp_io_device.StartMessage startMessage = 4;
    case kStartMessage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.startmessage_);
      break;
    }
    // .tcp_io_device.StopMessage stopMessage = 5;
    case kStopMessage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.message_.stopmessage_);
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TCPMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TCPMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TCPMessage::GetClassData() const { return &_class_data_; }


void TCPMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TCPMessage*>(&to_msg);
  auto& from = static_cast<const TCPMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tcp_io_device.TCPMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  if (from._internal_messagetype() != 0) {
    _this->_internal_set_messagetype(from._internal_messagetype());
  }
  switch (from.message_case()) {
    case kSetupMessage: {
      _this->_internal_mutable_setupmessage()->::tcp_io_device::SetupMessage::MergeFrom(
          from._internal_setupmessage());
      break;
    }
    case kDataMessage: {
      _this->_internal_mutable_datamessage()->::tcp_io_device::DataMessage::MergeFrom(
          from._internal_datamessage());
      break;
    }
    case kStartMessage: {
      _this->_internal_mutable_startmessage()->::tcp_io_device::StartMessage::MergeFrom(
          from._internal_startmessage());
      break;
    }
    case kStopMessage: {
      _this->_internal_mutable_stopmessage()->::tcp_io_device::StopMessage::MergeFrom(
          from._internal_stopmessage());
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TCPMessage::CopyFrom(const TCPMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tcp_io_device.TCPMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCPMessage::IsInitialized() const {
  return true;
}

void TCPMessage::InternalSwap(TCPMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TCPMessage, _impl_.messagetype_)
      + sizeof(TCPMessage::_impl_.messagetype_)
      - PROTOBUF_FIELD_OFFSET(TCPMessage, _impl_.timestamp_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_));
  swap(_impl_.message_, other->_impl_.message_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata TCPMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tcp_5fdata_5fmessage_2eproto_getter, &descriptor_table_tcp_5fdata_5fmessage_2eproto_once,
      file_level_metadata_tcp_5fdata_5fmessage_2eproto[0]);
}

// ===================================================================

class StartMessage::_Internal {
 public:
};

StartMessage::StartMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tcp_io_device.StartMessage)
}
StartMessage::StartMessage(const StartMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StartMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.diagnosticmode_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.diagnosticmode_ = from._impl_.diagnosticmode_;
  // @@protoc_insertion_point(copy_constructor:tcp_io_device.StartMessage)
}

inline void StartMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.diagnosticmode_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

StartMessage::~StartMessage() {
  // @@protoc_insertion_point(destructor:tcp_io_device.StartMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StartMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void StartMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StartMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:tcp_io_device.StartMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.diagnosticmode_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StartMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool diagnosticMode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.diagnosticmode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StartMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tcp_io_device.StartMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool diagnosticMode = 1;
  if (this->_internal_diagnosticmode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_diagnosticmode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tcp_io_device.StartMessage)
  return target;
}

size_t StartMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tcp_io_device.StartMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool diagnosticMode = 1;
  if (this->_internal_diagnosticmode() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StartMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StartMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StartMessage::GetClassData() const { return &_class_data_; }


void StartMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StartMessage*>(&to_msg);
  auto& from = static_cast<const StartMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tcp_io_device.StartMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_diagnosticmode() != 0) {
    _this->_internal_set_diagnosticmode(from._internal_diagnosticmode());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StartMessage::CopyFrom(const StartMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tcp_io_device.StartMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartMessage::IsInitialized() const {
  return true;
}

void StartMessage::InternalSwap(StartMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.diagnosticmode_, other->_impl_.diagnosticmode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StartMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tcp_5fdata_5fmessage_2eproto_getter, &descriptor_table_tcp_5fdata_5fmessage_2eproto_once,
      file_level_metadata_tcp_5fdata_5fmessage_2eproto[1]);
}

// ===================================================================

class StopMessage::_Internal {
 public:
};

StopMessage::StopMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:tcp_io_device.StopMessage)
}
StopMessage::StopMessage(const StopMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  StopMessage* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tcp_io_device.StopMessage)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StopMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StopMessage::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata StopMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tcp_5fdata_5fmessage_2eproto_getter, &descriptor_table_tcp_5fdata_5fmessage_2eproto_once,
      file_level_metadata_tcp_5fdata_5fmessage_2eproto[2]);
}

// ===================================================================

SetupMessage_EntitiesEntry_DoNotUse::SetupMessage_EntitiesEntry_DoNotUse() {}
SetupMessage_EntitiesEntry_DoNotUse::SetupMessage_EntitiesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void SetupMessage_EntitiesEntry_DoNotUse::MergeFrom(const SetupMessage_EntitiesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata SetupMessage_EntitiesEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tcp_5fdata_5fmessage_2eproto_getter, &descriptor_table_tcp_5fdata_5fmessage_2eproto_once,
      file_level_metadata_tcp_5fdata_5fmessage_2eproto[3]);
}

// ===================================================================

SetupMessage_ObjectsEntry_DoNotUse::SetupMessage_ObjectsEntry_DoNotUse() {}
SetupMessage_ObjectsEntry_DoNotUse::SetupMessage_ObjectsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void SetupMessage_ObjectsEntry_DoNotUse::MergeFrom(const SetupMessage_ObjectsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata SetupMessage_ObjectsEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tcp_5fdata_5fmessage_2eproto_getter, &descriptor_table_tcp_5fdata_5fmessage_2eproto_once,
      file_level_metadata_tcp_5fdata_5fmessage_2eproto[4]);
}

// ===================================================================

SetupMessage_CommandsEntry_DoNotUse::SetupMessage_CommandsEntry_DoNotUse() {}
SetupMessage_CommandsEntry_DoNotUse::SetupMessage_CommandsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void SetupMessage_CommandsEntry_DoNotUse::MergeFrom(const SetupMessage_CommandsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata SetupMessage_CommandsEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tcp_5fdata_5fmessage_2eproto_getter, &descriptor_table_tcp_5fdata_5fmessage_2eproto_once,
      file_level_metadata_tcp_5fdata_5fmessage_2eproto[5]);
}

// ===================================================================

class SetupMessage::_Internal {
 public:
};

SetupMessage::SetupMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &SetupMessage::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:tcp_io_device.SetupMessage)
}
SetupMessage::SetupMessage(const SetupMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SetupMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.entities_)*/{}
    , /*decltype(_impl_.objects_)*/{}
    , /*decltype(_impl_.commands_)*/{}
    , decltype(_impl_.commanddescriptions_){from._impl_.commanddescriptions_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.entities_.MergeFrom(from._impl_.entities_);
  _this->_impl_.objects_.MergeFrom(from._impl_.objects_);
  _this->_impl_.commands_.MergeFrom(from._impl_.commands_);
  // @@protoc_insertion_point(copy_constructor:tcp_io_device.SetupMessage)
}

inline void SetupMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.entities_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.objects_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.commands_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.commanddescriptions_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SetupMessage::~SetupMessage() {
  // @@protoc_insertion_point(destructor:tcp_io_device.SetupMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void SetupMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.entities_.Destruct();
  _impl_.entities_.~MapField();
  _impl_.objects_.Destruct();
  _impl_.objects_.~MapField();
  _impl_.commands_.Destruct();
  _impl_.commands_.~MapField();
  _impl_.commanddescriptions_.~RepeatedPtrField();
}

void SetupMessage::ArenaDtor(void* object) {
  SetupMessage* _this = reinterpret_cast< SetupMessage* >(object);
  _this->_impl_.entities_.Destruct();
  _this->_impl_.objects_.Destruct();
  _this->_impl_.commands_.Destruct();
}
void SetupMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SetupMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:tcp_io_device.SetupMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.entities_.Clear();
  _impl_.objects_.Clear();
  _impl_.commands_.Clear();
  _impl_.commanddescriptions_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetupMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<string, int32> entities = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.entities_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<string, int32> objects = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.objects_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<string, int32> commands = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.commands_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .tcp_io_device.CommandDescription commandDescriptions = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_commanddescriptions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SetupMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tcp_io_device.SetupMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, int32> entities = 1;
  if (!this->_internal_entities().empty()) {
    using MapType = ::_pb::Map<std::string, int32_t>;
    using WireHelper = SetupMessage_EntitiesEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_entities();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "tcp_io_device.SetupMessage.EntitiesEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // map<string, int32> objects = 2;
  if (!this->_internal_objects().empty()) {
    using MapType = ::_pb::Map<std::string, int32_t>;
    using WireHelper = SetupMessage_ObjectsEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_objects();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "tcp_io_device.SetupMessage.ObjectsEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // map<string, int32> commands = 3;
  if (!this->_internal_commands().empty()) {
    using MapType = ::_pb::Map<std::string, int32_t>;
    using WireHelper = SetupMessage_CommandsEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_commands();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "tcp_io_device.SetupMessage.CommandsEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // repeated .tcp_io_device.CommandDescription commandDescriptions = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_commanddescriptions_size()); i < n; i++) {
    const auto& repfield = this->_internal_commanddescriptions(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tcp_io_device.SetupMessage)
  return target;
}

size_t SetupMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tcp_io_device.SetupMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, int32> entities = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_entities_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >::const_iterator
      it = this->_internal_entities().begin();
      it != this->_internal_entities().end(); ++it) {
    total_size += SetupMessage_EntitiesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, int32> objects = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_objects_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >::const_iterator
      it = this->_internal_objects().begin();
      it != this->_internal_objects().end(); ++it) {
    total_size += SetupMessage_ObjectsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, int32> commands = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_commands_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >::const_iterator
      it = this->_internal_commands().begin();
      it != this->_internal_commands().end(); ++it) {
    total_size += SetupMessage_CommandsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated .tcp_io_device.CommandDescription commandDescriptions = 4;
  total_size += 1UL * this->_internal_commanddescriptions_size();
  for (const auto& msg : this->_impl_.commanddescriptions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetupMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SetupMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetupMessage::GetClassData() const { return &_class_data_; }


void SetupMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SetupMessage*>(&to_msg);
  auto& from = static_cast<const SetupMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tcp_io_device.SetupMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.entities_.MergeFrom(from._impl_.entities_);
  _this->_impl_.objects_.MergeFrom(from._impl_.objects_);
  _this->_impl_.commands_.MergeFrom(from._impl_.commands_);
  _this->_impl_.commanddescriptions_.MergeFrom(from._impl_.commanddescriptions_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetupMessage::CopyFrom(const SetupMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tcp_io_device.SetupMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetupMessage::IsInitialized() const {
  return true;
}

void SetupMessage::InternalSwap(SetupMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.entities_.InternalSwap(&other->_impl_.entities_);
  _impl_.objects_.InternalSwap(&other->_impl_.objects_);
  _impl_.commands_.InternalSwap(&other->_impl_.commands_);
  _impl_.commanddescriptions_.InternalSwap(&other->_impl_.commanddescriptions_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetupMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tcp_5fdata_5fmessage_2eproto_getter, &descriptor_table_tcp_5fdata_5fmessage_2eproto_once,
      file_level_metadata_tcp_5fdata_5fmessage_2eproto[6]);
}

// ===================================================================

class CommandDescription::_Internal {
 public:
  static const ::tcp_io_device::VariableDescription& description(const CommandDescription* msg);
};

const ::tcp_io_device::VariableDescription&
CommandDescription::_Internal::description(const CommandDescription* msg) {
  return *msg->_impl_.description_;
}
CommandDescription::CommandDescription(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tcp_io_device.CommandDescription)
}
CommandDescription::CommandDescription(const CommandDescription& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandDescription* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.description_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_description()) {
    _this->_impl_.description_ = new ::tcp_io_device::VariableDescription(*from._impl_.description_);
  }
  // @@protoc_insertion_point(copy_constructor:tcp_io_device.CommandDescription)
}

inline void CommandDescription::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.description_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CommandDescription::~CommandDescription() {
  // @@protoc_insertion_point(destructor:tcp_io_device.CommandDescription)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandDescription::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.description_;
}

void CommandDescription::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandDescription::Clear() {
// @@protoc_insertion_point(message_clear_start:tcp_io_device.CommandDescription)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.description_ != nullptr) {
    delete _impl_.description_;
  }
  _impl_.description_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandDescription::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tcp_io_device.VariableDescription description = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_description(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tcp_io_device.CommandDescription.name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandDescription::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tcp_io_device.CommandDescription)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .tcp_io_device.VariableDescription description = 1;
  if (this->_internal_has_description()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::description(this),
        _Internal::description(this).GetCachedSize(), target, stream);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tcp_io_device.CommandDescription.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tcp_io_device.CommandDescription)
  return target;
}

size_t CommandDescription::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tcp_io_device.CommandDescription)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .tcp_io_device.VariableDescription description = 1;
  if (this->_internal_has_description()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.description_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandDescription::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandDescription::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandDescription::GetClassData() const { return &_class_data_; }


void CommandDescription::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandDescription*>(&to_msg);
  auto& from = static_cast<const CommandDescription&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tcp_io_device.CommandDescription)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_has_description()) {
    _this->_internal_mutable_description()->::tcp_io_device::VariableDescription::MergeFrom(
        from._internal_description());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandDescription::CopyFrom(const CommandDescription& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tcp_io_device.CommandDescription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandDescription::IsInitialized() const {
  return true;
}

void CommandDescription::InternalSwap(CommandDescription* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  swap(_impl_.description_, other->_impl_.description_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandDescription::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tcp_5fdata_5fmessage_2eproto_getter, &descriptor_table_tcp_5fdata_5fmessage_2eproto_once,
      file_level_metadata_tcp_5fdata_5fmessage_2eproto[7]);
}

// ===================================================================

class DataMessage::_Internal {
 public:
};

DataMessage::DataMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tcp_io_device.DataMessage)
}
DataMessage::DataMessage(const DataMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DataMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.variables_){from._impl_.variables_}
    , decltype(_impl_.timespan_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.timespan_ = from._impl_.timespan_;
  // @@protoc_insertion_point(copy_constructor:tcp_io_device.DataMessage)
}

inline void DataMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.variables_){arena}
    , decltype(_impl_.timespan_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DataMessage::~DataMessage() {
  // @@protoc_insertion_point(destructor:tcp_io_device.DataMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DataMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.variables_.~RepeatedPtrField();
}

void DataMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DataMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:tcp_io_device.DataMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.variables_.Clear();
  _impl_.timespan_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DataMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .tcp_io_device.ProtoVariable variables = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_variables(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // uint64 timeSpan = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.timespan_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DataMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tcp_io_device.DataMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tcp_io_device.ProtoVariable variables = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_variables_size()); i < n; i++) {
    const auto& repfield = this->_internal_variables(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // uint64 timeSpan = 2;
  if (this->_internal_timespan() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_timespan(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tcp_io_device.DataMessage)
  return target;
}

size_t DataMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tcp_io_device.DataMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tcp_io_device.ProtoVariable variables = 1;
  total_size += 1UL * this->_internal_variables_size();
  for (const auto& msg : this->_impl_.variables_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint64 timeSpan = 2;
  if (this->_internal_timespan() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_timespan());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DataMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DataMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DataMessage::GetClassData() const { return &_class_data_; }


void DataMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DataMessage*>(&to_msg);
  auto& from = static_cast<const DataMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tcp_io_device.DataMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.variables_.MergeFrom(from._impl_.variables_);
  if (from._internal_timespan() != 0) {
    _this->_internal_set_timespan(from._internal_timespan());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DataMessage::CopyFrom(const DataMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tcp_io_device.DataMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataMessage::IsInitialized() const {
  return true;
}

void DataMessage::InternalSwap(DataMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.variables_.InternalSwap(&other->_impl_.variables_);
  swap(_impl_.timespan_, other->_impl_.timespan_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DataMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tcp_5fdata_5fmessage_2eproto_getter, &descriptor_table_tcp_5fdata_5fmessage_2eproto_once,
      file_level_metadata_tcp_5fdata_5fmessage_2eproto[8]);
}

// ===================================================================

class VariableDescription::_Internal {
 public:
};

VariableDescription::VariableDescription(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tcp_io_device.VariableDescription)
}
VariableDescription::VariableDescription(const VariableDescription& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  VariableDescription* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.dimensions_){from._impl_.dimensions_}
    , /*decltype(_impl_._dimensions_cached_byte_size_)*/{0}
    , decltype(_impl_.entityid_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.datatype_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.entityid_, &from._impl_.entityid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.datatype_) -
    reinterpret_cast<char*>(&_impl_.entityid_)) + sizeof(_impl_.datatype_));
  // @@protoc_insertion_point(copy_constructor:tcp_io_device.VariableDescription)
}

inline void VariableDescription::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.dimensions_){arena}
    , /*decltype(_impl_._dimensions_cached_byte_size_)*/{0}
    , decltype(_impl_.entityid_){0}
    , decltype(_impl_.id_){0}
    , decltype(_impl_.datatype_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

VariableDescription::~VariableDescription() {
  // @@protoc_insertion_point(destructor:tcp_io_device.VariableDescription)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VariableDescription::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.dimensions_.~RepeatedField();
}

void VariableDescription::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VariableDescription::Clear() {
// @@protoc_insertion_point(message_clear_start:tcp_io_device.VariableDescription)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.dimensions_.Clear();
  ::memset(&_impl_.entityid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.datatype_) -
      reinterpret_cast<char*>(&_impl_.entityid_)) + sizeof(_impl_.datatype_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VariableDescription::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 entityID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.entityid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 ID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tcp_io_device.VariableDescription.DataType dataType = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_datatype(static_cast<::tcp_io_device::VariableDescription_DataType>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated uint64 dimensions = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_dimensions(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 32) {
          _internal_add_dimensions(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VariableDescription::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tcp_io_device.VariableDescription)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 entityID = 1;
  if (this->_internal_entityid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_entityid(), target);
  }

  // int32 ID = 2;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_id(), target);
  }

  // .tcp_io_device.VariableDescription.DataType dataType = 3;
  if (this->_internal_datatype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_datatype(), target);
  }

  // repeated uint64 dimensions = 4;
  {
    int byte_size = _impl_._dimensions_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          4, _internal_dimensions(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tcp_io_device.VariableDescription)
  return target;
}

size_t VariableDescription::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tcp_io_device.VariableDescription)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 dimensions = 4;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt64Size(this->_impl_.dimensions_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._dimensions_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 entityID = 1;
  if (this->_internal_entityid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_entityid());
  }

  // int32 ID = 2;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  // .tcp_io_device.VariableDescription.DataType dataType = 3;
  if (this->_internal_datatype() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_datatype());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VariableDescription::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    VariableDescription::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VariableDescription::GetClassData() const { return &_class_data_; }


void VariableDescription::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<VariableDescription*>(&to_msg);
  auto& from = static_cast<const VariableDescription&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tcp_io_device.VariableDescription)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.dimensions_.MergeFrom(from._impl_.dimensions_);
  if (from._internal_entityid() != 0) {
    _this->_internal_set_entityid(from._internal_entityid());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_datatype() != 0) {
    _this->_internal_set_datatype(from._internal_datatype());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VariableDescription::CopyFrom(const VariableDescription& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tcp_io_device.VariableDescription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VariableDescription::IsInitialized() const {
  return true;
}

void VariableDescription::InternalSwap(VariableDescription* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.dimensions_.InternalSwap(&other->_impl_.dimensions_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VariableDescription, _impl_.datatype_)
      + sizeof(VariableDescription::_impl_.datatype_)
      - PROTOBUF_FIELD_OFFSET(VariableDescription, _impl_.entityid_)>(
          reinterpret_cast<char*>(&_impl_.entityid_),
          reinterpret_cast<char*>(&other->_impl_.entityid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VariableDescription::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tcp_5fdata_5fmessage_2eproto_getter, &descriptor_table_tcp_5fdata_5fmessage_2eproto_once,
      file_level_metadata_tcp_5fdata_5fmessage_2eproto[9]);
}

// ===================================================================

class ProtoVariable::_Internal {
 public:
  static const ::tcp_io_device::VariableDescription& metadata(const ProtoVariable* msg);
};

const ::tcp_io_device::VariableDescription&
ProtoVariable::_Internal::metadata(const ProtoVariable* msg) {
  return *msg->_impl_.metadata_;
}
ProtoVariable::ProtoVariable(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tcp_io_device.ProtoVariable)
}
ProtoVariable::ProtoVariable(const ProtoVariable& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ProtoVariable* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , decltype(_impl_.metadata_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_metadata()) {
    _this->_impl_.metadata_ = new ::tcp_io_device::VariableDescription(*from._impl_.metadata_);
  }
  // @@protoc_insertion_point(copy_constructor:tcp_io_device.ProtoVariable)
}

inline void ProtoVariable::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , decltype(_impl_.metadata_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ProtoVariable::~ProtoVariable() {
  // @@protoc_insertion_point(destructor:tcp_io_device.ProtoVariable)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ProtoVariable::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.Destroy();
  if (this != internal_default_instance()) delete _impl_.metadata_;
}

void ProtoVariable::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ProtoVariable::Clear() {
// @@protoc_insertion_point(message_clear_start:tcp_io_device.ProtoVariable)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.metadata_ != nullptr) {
    delete _impl_.metadata_;
  }
  _impl_.metadata_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProtoVariable::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tcp_io_device.VariableDescription metaData = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProtoVariable::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tcp_io_device.ProtoVariable)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .tcp_io_device.VariableDescription metaData = 1;
  if (this->_internal_has_metadata()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::metadata(this),
        _Internal::metadata(this).GetCachedSize(), target, stream);
  }

  // bytes data = 2;
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tcp_io_device.ProtoVariable)
  return target;
}

size_t ProtoVariable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tcp_io_device.ProtoVariable)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 2;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // .tcp_io_device.VariableDescription metaData = 1;
  if (this->_internal_has_metadata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.metadata_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProtoVariable::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ProtoVariable::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProtoVariable::GetClassData() const { return &_class_data_; }


void ProtoVariable::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ProtoVariable*>(&to_msg);
  auto& from = static_cast<const ProtoVariable&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tcp_io_device.ProtoVariable)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  if (from._internal_has_metadata()) {
    _this->_internal_mutable_metadata()->::tcp_io_device::VariableDescription::MergeFrom(
        from._internal_metadata());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProtoVariable::CopyFrom(const ProtoVariable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tcp_io_device.ProtoVariable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoVariable::IsInitialized() const {
  return true;
}

void ProtoVariable::InternalSwap(ProtoVariable* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_, lhs_arena,
      &other->_impl_.data_, rhs_arena
  );
  swap(_impl_.metadata_, other->_impl_.metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProtoVariable::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tcp_5fdata_5fmessage_2eproto_getter, &descriptor_table_tcp_5fdata_5fmessage_2eproto_once,
      file_level_metadata_tcp_5fdata_5fmessage_2eproto[10]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace tcp_io_device
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tcp_io_device::TCPMessage*
Arena::CreateMaybeMessage< ::tcp_io_device::TCPMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tcp_io_device::TCPMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::tcp_io_device::StartMessage*
Arena::CreateMaybeMessage< ::tcp_io_device::StartMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tcp_io_device::StartMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::tcp_io_device::StopMessage*
Arena::CreateMaybeMessage< ::tcp_io_device::StopMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tcp_io_device::StopMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::tcp_io_device::SetupMessage_EntitiesEntry_DoNotUse*
Arena::CreateMaybeMessage< ::tcp_io_device::SetupMessage_EntitiesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tcp_io_device::SetupMessage_EntitiesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::tcp_io_device::SetupMessage_ObjectsEntry_DoNotUse*
Arena::CreateMaybeMessage< ::tcp_io_device::SetupMessage_ObjectsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tcp_io_device::SetupMessage_ObjectsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::tcp_io_device::SetupMessage_CommandsEntry_DoNotUse*
Arena::CreateMaybeMessage< ::tcp_io_device::SetupMessage_CommandsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tcp_io_device::SetupMessage_CommandsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::tcp_io_device::SetupMessage*
Arena::CreateMaybeMessage< ::tcp_io_device::SetupMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tcp_io_device::SetupMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::tcp_io_device::CommandDescription*
Arena::CreateMaybeMessage< ::tcp_io_device::CommandDescription >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tcp_io_device::CommandDescription >(arena);
}
template<> PROTOBUF_NOINLINE ::tcp_io_device::DataMessage*
Arena::CreateMaybeMessage< ::tcp_io_device::DataMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tcp_io_device::DataMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::tcp_io_device::VariableDescription*
Arena::CreateMaybeMessage< ::tcp_io_device::VariableDescription >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tcp_io_device::VariableDescription >(arena);
}
template<> PROTOBUF_NOINLINE ::tcp_io_device::ProtoVariable*
Arena::CreateMaybeMessage< ::tcp_io_device::ProtoVariable >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tcp_io_device::ProtoVariable >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

#endif // ENABLE_PROTOBUF
