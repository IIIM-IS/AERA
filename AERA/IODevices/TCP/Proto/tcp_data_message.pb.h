// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tcp_data_message.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_tcp_5fdata_5fmessage_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_tcp_5fdata_5fmessage_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_tcp_5fdata_5fmessage_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_tcp_5fdata_5fmessage_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[11]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tcp_5fdata_5fmessage_2eproto;
namespace tcp_io_device {
class CommandDescription;
class CommandDescriptionDefaultTypeInternal;
extern CommandDescriptionDefaultTypeInternal _CommandDescription_default_instance_;
class DataMessage;
class DataMessageDefaultTypeInternal;
extern DataMessageDefaultTypeInternal _DataMessage_default_instance_;
class ProtoVariable;
class ProtoVariableDefaultTypeInternal;
extern ProtoVariableDefaultTypeInternal _ProtoVariable_default_instance_;
class SetupMessage;
class SetupMessageDefaultTypeInternal;
extern SetupMessageDefaultTypeInternal _SetupMessage_default_instance_;
class SetupMessage_CommandsEntry_DoNotUse;
class SetupMessage_CommandsEntry_DoNotUseDefaultTypeInternal;
extern SetupMessage_CommandsEntry_DoNotUseDefaultTypeInternal _SetupMessage_CommandsEntry_DoNotUse_default_instance_;
class SetupMessage_EntitiesEntry_DoNotUse;
class SetupMessage_EntitiesEntry_DoNotUseDefaultTypeInternal;
extern SetupMessage_EntitiesEntry_DoNotUseDefaultTypeInternal _SetupMessage_EntitiesEntry_DoNotUse_default_instance_;
class SetupMessage_ObjectsEntry_DoNotUse;
class SetupMessage_ObjectsEntry_DoNotUseDefaultTypeInternal;
extern SetupMessage_ObjectsEntry_DoNotUseDefaultTypeInternal _SetupMessage_ObjectsEntry_DoNotUse_default_instance_;
class StartMessage;
class StartMessageDefaultTypeInternal;
extern StartMessageDefaultTypeInternal _StartMessage_default_instance_;
class StopMessage;
class StopMessageDefaultTypeInternal;
extern StopMessageDefaultTypeInternal _StopMessage_default_instance_;
class TCPMessage;
class TCPMessageDefaultTypeInternal;
extern TCPMessageDefaultTypeInternal _TCPMessage_default_instance_;
class VariableDescription;
class VariableDescriptionDefaultTypeInternal;
extern VariableDescriptionDefaultTypeInternal _VariableDescription_default_instance_;
}  // namespace tcp_io_device
PROTOBUF_NAMESPACE_OPEN
template<> ::tcp_io_device::CommandDescription* Arena::CreateMaybeMessage<::tcp_io_device::CommandDescription>(Arena*);
template<> ::tcp_io_device::DataMessage* Arena::CreateMaybeMessage<::tcp_io_device::DataMessage>(Arena*);
template<> ::tcp_io_device::ProtoVariable* Arena::CreateMaybeMessage<::tcp_io_device::ProtoVariable>(Arena*);
template<> ::tcp_io_device::SetupMessage* Arena::CreateMaybeMessage<::tcp_io_device::SetupMessage>(Arena*);
template<> ::tcp_io_device::SetupMessage_CommandsEntry_DoNotUse* Arena::CreateMaybeMessage<::tcp_io_device::SetupMessage_CommandsEntry_DoNotUse>(Arena*);
template<> ::tcp_io_device::SetupMessage_EntitiesEntry_DoNotUse* Arena::CreateMaybeMessage<::tcp_io_device::SetupMessage_EntitiesEntry_DoNotUse>(Arena*);
template<> ::tcp_io_device::SetupMessage_ObjectsEntry_DoNotUse* Arena::CreateMaybeMessage<::tcp_io_device::SetupMessage_ObjectsEntry_DoNotUse>(Arena*);
template<> ::tcp_io_device::StartMessage* Arena::CreateMaybeMessage<::tcp_io_device::StartMessage>(Arena*);
template<> ::tcp_io_device::StopMessage* Arena::CreateMaybeMessage<::tcp_io_device::StopMessage>(Arena*);
template<> ::tcp_io_device::TCPMessage* Arena::CreateMaybeMessage<::tcp_io_device::TCPMessage>(Arena*);
template<> ::tcp_io_device::VariableDescription* Arena::CreateMaybeMessage<::tcp_io_device::VariableDescription>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace tcp_io_device {

enum TCPMessage_Type : int {
  TCPMessage_Type_SETUP = 0,
  TCPMessage_Type_DATA = 1,
  TCPMessage_Type_START = 2,
  TCPMessage_Type_STOP = 3,
  TCPMessage_Type_TCPMessage_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  TCPMessage_Type_TCPMessage_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool TCPMessage_Type_IsValid(int value);
constexpr TCPMessage_Type TCPMessage_Type_Type_MIN = TCPMessage_Type_SETUP;
constexpr TCPMessage_Type TCPMessage_Type_Type_MAX = TCPMessage_Type_STOP;
constexpr int TCPMessage_Type_Type_ARRAYSIZE = TCPMessage_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TCPMessage_Type_descriptor();
template<typename T>
inline const std::string& TCPMessage_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TCPMessage_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TCPMessage_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TCPMessage_Type_descriptor(), enum_t_value);
}
inline bool TCPMessage_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TCPMessage_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TCPMessage_Type>(
    TCPMessage_Type_descriptor(), name, value);
}
enum VariableDescription_DataType : int {
  VariableDescription_DataType_DOUBLE = 0,
  VariableDescription_DataType_INT64 = 3,
  VariableDescription_DataType_BOOL = 12,
  VariableDescription_DataType_STRING = 13,
  VariableDescription_DataType_BYTES = 14,
  VariableDescription_DataType_VariableDescription_DataType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  VariableDescription_DataType_VariableDescription_DataType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool VariableDescription_DataType_IsValid(int value);
constexpr VariableDescription_DataType VariableDescription_DataType_DataType_MIN = VariableDescription_DataType_DOUBLE;
constexpr VariableDescription_DataType VariableDescription_DataType_DataType_MAX = VariableDescription_DataType_BYTES;
constexpr int VariableDescription_DataType_DataType_ARRAYSIZE = VariableDescription_DataType_DataType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VariableDescription_DataType_descriptor();
template<typename T>
inline const std::string& VariableDescription_DataType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, VariableDescription_DataType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function VariableDescription_DataType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    VariableDescription_DataType_descriptor(), enum_t_value);
}
inline bool VariableDescription_DataType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, VariableDescription_DataType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<VariableDescription_DataType>(
    VariableDescription_DataType_descriptor(), name, value);
}
// ===================================================================

class TCPMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tcp_io_device.TCPMessage) */ {
 public:
  inline TCPMessage() : TCPMessage(nullptr) {}
  virtual ~TCPMessage();

  TCPMessage(const TCPMessage& from);
  TCPMessage(TCPMessage&& from) noexcept
    : TCPMessage() {
    *this = ::std::move(from);
  }

  inline TCPMessage& operator=(const TCPMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline TCPMessage& operator=(TCPMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TCPMessage& default_instance();

  enum MessageCase {
    kSetupMessage = 2,
    kDataMessage = 3,
    kStartMessage = 4,
    kStopMessage = 5,
    MESSAGE_NOT_SET = 0,
  };

  static inline const TCPMessage* internal_default_instance() {
    return reinterpret_cast<const TCPMessage*>(
               &_TCPMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TCPMessage& a, TCPMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(TCPMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TCPMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TCPMessage* New() const final {
    return CreateMaybeMessage<TCPMessage>(nullptr);
  }

  TCPMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TCPMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TCPMessage& from);
  void MergeFrom(const TCPMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TCPMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tcp_io_device.TCPMessage";
  }
  protected:
  explicit TCPMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tcp_5fdata_5fmessage_2eproto);
    return ::descriptor_table_tcp_5fdata_5fmessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef TCPMessage_Type Type;
  static constexpr Type SETUP =
    TCPMessage_Type_SETUP;
  static constexpr Type DATA =
    TCPMessage_Type_DATA;
  static constexpr Type START =
    TCPMessage_Type_START;
  static constexpr Type STOP =
    TCPMessage_Type_STOP;
  static inline bool Type_IsValid(int value) {
    return TCPMessage_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    TCPMessage_Type_Type_MIN;
  static constexpr Type Type_MAX =
    TCPMessage_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    TCPMessage_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return TCPMessage_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return TCPMessage_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Type* value) {
    return TCPMessage_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kMessageTypeFieldNumber = 1,
    kTimestampFieldNumber = 6,
    kSetupMessageFieldNumber = 2,
    kDataMessageFieldNumber = 3,
    kStartMessageFieldNumber = 4,
    kStopMessageFieldNumber = 5,
  };
  // .tcp_io_device.TCPMessage.Type messageType = 1;
  void clear_messagetype();
  ::tcp_io_device::TCPMessage_Type messagetype() const;
  void set_messagetype(::tcp_io_device::TCPMessage_Type value);
  private:
  ::tcp_io_device::TCPMessage_Type _internal_messagetype() const;
  void _internal_set_messagetype(::tcp_io_device::TCPMessage_Type value);
  public:

  // uint64 timestamp = 6;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .tcp_io_device.SetupMessage setupMessage = 2;
  bool has_setupmessage() const;
  private:
  bool _internal_has_setupmessage() const;
  public:
  void clear_setupmessage();
  const ::tcp_io_device::SetupMessage& setupmessage() const;
  ::tcp_io_device::SetupMessage* release_setupmessage();
  ::tcp_io_device::SetupMessage* mutable_setupmessage();
  void set_allocated_setupmessage(::tcp_io_device::SetupMessage* setupmessage);
  private:
  const ::tcp_io_device::SetupMessage& _internal_setupmessage() const;
  ::tcp_io_device::SetupMessage* _internal_mutable_setupmessage();
  public:
  void unsafe_arena_set_allocated_setupmessage(
      ::tcp_io_device::SetupMessage* setupmessage);
  ::tcp_io_device::SetupMessage* unsafe_arena_release_setupmessage();

  // .tcp_io_device.DataMessage dataMessage = 3;
  bool has_datamessage() const;
  private:
  bool _internal_has_datamessage() const;
  public:
  void clear_datamessage();
  const ::tcp_io_device::DataMessage& datamessage() const;
  ::tcp_io_device::DataMessage* release_datamessage();
  ::tcp_io_device::DataMessage* mutable_datamessage();
  void set_allocated_datamessage(::tcp_io_device::DataMessage* datamessage);
  private:
  const ::tcp_io_device::DataMessage& _internal_datamessage() const;
  ::tcp_io_device::DataMessage* _internal_mutable_datamessage();
  public:
  void unsafe_arena_set_allocated_datamessage(
      ::tcp_io_device::DataMessage* datamessage);
  ::tcp_io_device::DataMessage* unsafe_arena_release_datamessage();

  // .tcp_io_device.StartMessage startMessage = 4;
  bool has_startmessage() const;
  private:
  bool _internal_has_startmessage() const;
  public:
  void clear_startmessage();
  const ::tcp_io_device::StartMessage& startmessage() const;
  ::tcp_io_device::StartMessage* release_startmessage();
  ::tcp_io_device::StartMessage* mutable_startmessage();
  void set_allocated_startmessage(::tcp_io_device::StartMessage* startmessage);
  private:
  const ::tcp_io_device::StartMessage& _internal_startmessage() const;
  ::tcp_io_device::StartMessage* _internal_mutable_startmessage();
  public:
  void unsafe_arena_set_allocated_startmessage(
      ::tcp_io_device::StartMessage* startmessage);
  ::tcp_io_device::StartMessage* unsafe_arena_release_startmessage();

  // .tcp_io_device.StopMessage stopMessage = 5;
  bool has_stopmessage() const;
  private:
  bool _internal_has_stopmessage() const;
  public:
  void clear_stopmessage();
  const ::tcp_io_device::StopMessage& stopmessage() const;
  ::tcp_io_device::StopMessage* release_stopmessage();
  ::tcp_io_device::StopMessage* mutable_stopmessage();
  void set_allocated_stopmessage(::tcp_io_device::StopMessage* stopmessage);
  private:
  const ::tcp_io_device::StopMessage& _internal_stopmessage() const;
  ::tcp_io_device::StopMessage* _internal_mutable_stopmessage();
  public:
  void unsafe_arena_set_allocated_stopmessage(
      ::tcp_io_device::StopMessage* stopmessage);
  ::tcp_io_device::StopMessage* unsafe_arena_release_stopmessage();

  void clear_message();
  MessageCase message_case() const;
  // @@protoc_insertion_point(class_scope:tcp_io_device.TCPMessage)
 private:
  class _Internal;
  void set_has_setupmessage();
  void set_has_datamessage();
  void set_has_startmessage();
  void set_has_stopmessage();

  inline bool has_message() const;
  inline void clear_has_message();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int messagetype_;
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp_;
  union MessageUnion {
    MessageUnion() {}
    ::tcp_io_device::SetupMessage* setupmessage_;
    ::tcp_io_device::DataMessage* datamessage_;
    ::tcp_io_device::StartMessage* startmessage_;
    ::tcp_io_device::StopMessage* stopmessage_;
  } message_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_tcp_5fdata_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class StartMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tcp_io_device.StartMessage) */ {
 public:
  inline StartMessage() : StartMessage(nullptr) {}
  virtual ~StartMessage();

  StartMessage(const StartMessage& from);
  StartMessage(StartMessage&& from) noexcept
    : StartMessage() {
    *this = ::std::move(from);
  }

  inline StartMessage& operator=(const StartMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartMessage& operator=(StartMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StartMessage& default_instance();

  static inline const StartMessage* internal_default_instance() {
    return reinterpret_cast<const StartMessage*>(
               &_StartMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(StartMessage& a, StartMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(StartMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StartMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StartMessage* New() const final {
    return CreateMaybeMessage<StartMessage>(nullptr);
  }

  StartMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StartMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StartMessage& from);
  void MergeFrom(const StartMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StartMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tcp_io_device.StartMessage";
  }
  protected:
  explicit StartMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tcp_5fdata_5fmessage_2eproto);
    return ::descriptor_table_tcp_5fdata_5fmessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDiagnosticModeFieldNumber = 1,
  };
  // bool diagnosticMode = 1;
  void clear_diagnosticmode();
  bool diagnosticmode() const;
  void set_diagnosticmode(bool value);
  private:
  bool _internal_diagnosticmode() const;
  void _internal_set_diagnosticmode(bool value);
  public:

  // @@protoc_insertion_point(class_scope:tcp_io_device.StartMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool diagnosticmode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tcp_5fdata_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class StopMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tcp_io_device.StopMessage) */ {
 public:
  inline StopMessage() : StopMessage(nullptr) {}
  virtual ~StopMessage();

  StopMessage(const StopMessage& from);
  StopMessage(StopMessage&& from) noexcept
    : StopMessage() {
    *this = ::std::move(from);
  }

  inline StopMessage& operator=(const StopMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopMessage& operator=(StopMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StopMessage& default_instance();

  static inline const StopMessage* internal_default_instance() {
    return reinterpret_cast<const StopMessage*>(
               &_StopMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(StopMessage& a, StopMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(StopMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StopMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StopMessage* New() const final {
    return CreateMaybeMessage<StopMessage>(nullptr);
  }

  StopMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StopMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StopMessage& from);
  void MergeFrom(const StopMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tcp_io_device.StopMessage";
  }
  protected:
  explicit StopMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tcp_5fdata_5fmessage_2eproto);
    return ::descriptor_table_tcp_5fdata_5fmessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:tcp_io_device.StopMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tcp_5fdata_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class SetupMessage_EntitiesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<SetupMessage_EntitiesEntry_DoNotUse, 
    std::string, ::PROTOBUF_NAMESPACE_ID::int32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<SetupMessage_EntitiesEntry_DoNotUse, 
    std::string, ::PROTOBUF_NAMESPACE_ID::int32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32> SuperType;
  SetupMessage_EntitiesEntry_DoNotUse();
  explicit SetupMessage_EntitiesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const SetupMessage_EntitiesEntry_DoNotUse& other);
  static const SetupMessage_EntitiesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const SetupMessage_EntitiesEntry_DoNotUse*>(&_SetupMessage_EntitiesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "tcp_io_device.SetupMessage.EntitiesEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tcp_5fdata_5fmessage_2eproto);
    return ::descriptor_table_tcp_5fdata_5fmessage_2eproto.file_level_metadata[3];
  }

  public:
};

// -------------------------------------------------------------------

class SetupMessage_ObjectsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<SetupMessage_ObjectsEntry_DoNotUse, 
    std::string, ::PROTOBUF_NAMESPACE_ID::int32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<SetupMessage_ObjectsEntry_DoNotUse, 
    std::string, ::PROTOBUF_NAMESPACE_ID::int32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32> SuperType;
  SetupMessage_ObjectsEntry_DoNotUse();
  explicit SetupMessage_ObjectsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const SetupMessage_ObjectsEntry_DoNotUse& other);
  static const SetupMessage_ObjectsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const SetupMessage_ObjectsEntry_DoNotUse*>(&_SetupMessage_ObjectsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "tcp_io_device.SetupMessage.ObjectsEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tcp_5fdata_5fmessage_2eproto);
    return ::descriptor_table_tcp_5fdata_5fmessage_2eproto.file_level_metadata[4];
  }

  public:
};

// -------------------------------------------------------------------

class SetupMessage_CommandsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<SetupMessage_CommandsEntry_DoNotUse, 
    std::string, ::PROTOBUF_NAMESPACE_ID::int32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<SetupMessage_CommandsEntry_DoNotUse, 
    std::string, ::PROTOBUF_NAMESPACE_ID::int32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32> SuperType;
  SetupMessage_CommandsEntry_DoNotUse();
  explicit SetupMessage_CommandsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const SetupMessage_CommandsEntry_DoNotUse& other);
  static const SetupMessage_CommandsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const SetupMessage_CommandsEntry_DoNotUse*>(&_SetupMessage_CommandsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "tcp_io_device.SetupMessage.CommandsEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tcp_5fdata_5fmessage_2eproto);
    return ::descriptor_table_tcp_5fdata_5fmessage_2eproto.file_level_metadata[5];
  }

  public:
};

// -------------------------------------------------------------------

class SetupMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tcp_io_device.SetupMessage) */ {
 public:
  inline SetupMessage() : SetupMessage(nullptr) {}
  virtual ~SetupMessage();

  SetupMessage(const SetupMessage& from);
  SetupMessage(SetupMessage&& from) noexcept
    : SetupMessage() {
    *this = ::std::move(from);
  }

  inline SetupMessage& operator=(const SetupMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetupMessage& operator=(SetupMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetupMessage& default_instance();

  static inline const SetupMessage* internal_default_instance() {
    return reinterpret_cast<const SetupMessage*>(
               &_SetupMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SetupMessage& a, SetupMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(SetupMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetupMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetupMessage* New() const final {
    return CreateMaybeMessage<SetupMessage>(nullptr);
  }

  SetupMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetupMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetupMessage& from);
  void MergeFrom(const SetupMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetupMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tcp_io_device.SetupMessage";
  }
  protected:
  explicit SetupMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tcp_5fdata_5fmessage_2eproto);
    return ::descriptor_table_tcp_5fdata_5fmessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kEntitiesFieldNumber = 1,
    kObjectsFieldNumber = 2,
    kCommandsFieldNumber = 3,
    kCommandDescriptionsFieldNumber = 4,
  };
  // map<string, int32> entities = 1;
  int entities_size() const;
  private:
  int _internal_entities_size() const;
  public:
  void clear_entities();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_entities() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_entities();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >&
      entities() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_entities();

  // map<string, int32> objects = 2;
  int objects_size() const;
  private:
  int _internal_objects_size() const;
  public:
  void clear_objects();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_objects() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_objects();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >&
      objects() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_objects();

  // map<string, int32> commands = 3;
  int commands_size() const;
  private:
  int _internal_commands_size() const;
  public:
  void clear_commands();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_commands() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_commands();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >&
      commands() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_commands();

  // repeated .tcp_io_device.CommandDescription commandDescriptions = 4;
  int commanddescriptions_size() const;
  private:
  int _internal_commanddescriptions_size() const;
  public:
  void clear_commanddescriptions();
  ::tcp_io_device::CommandDescription* mutable_commanddescriptions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tcp_io_device::CommandDescription >*
      mutable_commanddescriptions();
  private:
  const ::tcp_io_device::CommandDescription& _internal_commanddescriptions(int index) const;
  ::tcp_io_device::CommandDescription* _internal_add_commanddescriptions();
  public:
  const ::tcp_io_device::CommandDescription& commanddescriptions(int index) const;
  ::tcp_io_device::CommandDescription* add_commanddescriptions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tcp_io_device::CommandDescription >&
      commanddescriptions() const;

  // @@protoc_insertion_point(class_scope:tcp_io_device.SetupMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      SetupMessage_EntitiesEntry_DoNotUse,
      std::string, ::PROTOBUF_NAMESPACE_ID::int32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32> entities_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      SetupMessage_ObjectsEntry_DoNotUse,
      std::string, ::PROTOBUF_NAMESPACE_ID::int32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32> objects_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      SetupMessage_CommandsEntry_DoNotUse,
      std::string, ::PROTOBUF_NAMESPACE_ID::int32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32> commands_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tcp_io_device::CommandDescription > commanddescriptions_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tcp_5fdata_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class CommandDescription PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tcp_io_device.CommandDescription) */ {
 public:
  inline CommandDescription() : CommandDescription(nullptr) {}
  virtual ~CommandDescription();

  CommandDescription(const CommandDescription& from);
  CommandDescription(CommandDescription&& from) noexcept
    : CommandDescription() {
    *this = ::std::move(from);
  }

  inline CommandDescription& operator=(const CommandDescription& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandDescription& operator=(CommandDescription&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CommandDescription& default_instance();

  static inline const CommandDescription* internal_default_instance() {
    return reinterpret_cast<const CommandDescription*>(
               &_CommandDescription_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CommandDescription& a, CommandDescription& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandDescription* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandDescription* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommandDescription* New() const final {
    return CreateMaybeMessage<CommandDescription>(nullptr);
  }

  CommandDescription* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommandDescription>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CommandDescription& from);
  void MergeFrom(const CommandDescription& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandDescription* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tcp_io_device.CommandDescription";
  }
  protected:
  explicit CommandDescription(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tcp_5fdata_5fmessage_2eproto);
    return ::descriptor_table_tcp_5fdata_5fmessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kDescriptionFieldNumber = 1,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .tcp_io_device.VariableDescription description = 1;
  bool has_description() const;
  private:
  bool _internal_has_description() const;
  public:
  void clear_description();
  const ::tcp_io_device::VariableDescription& description() const;
  ::tcp_io_device::VariableDescription* release_description();
  ::tcp_io_device::VariableDescription* mutable_description();
  void set_allocated_description(::tcp_io_device::VariableDescription* description);
  private:
  const ::tcp_io_device::VariableDescription& _internal_description() const;
  ::tcp_io_device::VariableDescription* _internal_mutable_description();
  public:
  void unsafe_arena_set_allocated_description(
      ::tcp_io_device::VariableDescription* description);
  ::tcp_io_device::VariableDescription* unsafe_arena_release_description();

  // @@protoc_insertion_point(class_scope:tcp_io_device.CommandDescription)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::tcp_io_device::VariableDescription* description_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tcp_5fdata_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class DataMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tcp_io_device.DataMessage) */ {
 public:
  inline DataMessage() : DataMessage(nullptr) {}
  virtual ~DataMessage();

  DataMessage(const DataMessage& from);
  DataMessage(DataMessage&& from) noexcept
    : DataMessage() {
    *this = ::std::move(from);
  }

  inline DataMessage& operator=(const DataMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline DataMessage& operator=(DataMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DataMessage& default_instance();

  static inline const DataMessage* internal_default_instance() {
    return reinterpret_cast<const DataMessage*>(
               &_DataMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(DataMessage& a, DataMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(DataMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DataMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DataMessage* New() const final {
    return CreateMaybeMessage<DataMessage>(nullptr);
  }

  DataMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DataMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DataMessage& from);
  void MergeFrom(const DataMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DataMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tcp_io_device.DataMessage";
  }
  protected:
  explicit DataMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tcp_5fdata_5fmessage_2eproto);
    return ::descriptor_table_tcp_5fdata_5fmessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVariablesFieldNumber = 1,
    kTimeSpanFieldNumber = 2,
  };
  // repeated .tcp_io_device.ProtoVariable variables = 1;
  int variables_size() const;
  private:
  int _internal_variables_size() const;
  public:
  void clear_variables();
  ::tcp_io_device::ProtoVariable* mutable_variables(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tcp_io_device::ProtoVariable >*
      mutable_variables();
  private:
  const ::tcp_io_device::ProtoVariable& _internal_variables(int index) const;
  ::tcp_io_device::ProtoVariable* _internal_add_variables();
  public:
  const ::tcp_io_device::ProtoVariable& variables(int index) const;
  ::tcp_io_device::ProtoVariable* add_variables();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tcp_io_device::ProtoVariable >&
      variables() const;

  // uint64 timeSpan = 2;
  void clear_timespan();
  ::PROTOBUF_NAMESPACE_ID::uint64 timespan() const;
  void set_timespan(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_timespan() const;
  void _internal_set_timespan(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:tcp_io_device.DataMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tcp_io_device::ProtoVariable > variables_;
  ::PROTOBUF_NAMESPACE_ID::uint64 timespan_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tcp_5fdata_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class VariableDescription PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tcp_io_device.VariableDescription) */ {
 public:
  inline VariableDescription() : VariableDescription(nullptr) {}
  virtual ~VariableDescription();

  VariableDescription(const VariableDescription& from);
  VariableDescription(VariableDescription&& from) noexcept
    : VariableDescription() {
    *this = ::std::move(from);
  }

  inline VariableDescription& operator=(const VariableDescription& from) {
    CopyFrom(from);
    return *this;
  }
  inline VariableDescription& operator=(VariableDescription&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VariableDescription& default_instance();

  static inline const VariableDescription* internal_default_instance() {
    return reinterpret_cast<const VariableDescription*>(
               &_VariableDescription_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(VariableDescription& a, VariableDescription& b) {
    a.Swap(&b);
  }
  inline void Swap(VariableDescription* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VariableDescription* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VariableDescription* New() const final {
    return CreateMaybeMessage<VariableDescription>(nullptr);
  }

  VariableDescription* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VariableDescription>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VariableDescription& from);
  void MergeFrom(const VariableDescription& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VariableDescription* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tcp_io_device.VariableDescription";
  }
  protected:
  explicit VariableDescription(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tcp_5fdata_5fmessage_2eproto);
    return ::descriptor_table_tcp_5fdata_5fmessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef VariableDescription_DataType DataType;
  static constexpr DataType DOUBLE =
    VariableDescription_DataType_DOUBLE;
  static constexpr DataType INT64 =
    VariableDescription_DataType_INT64;
  static constexpr DataType BOOL =
    VariableDescription_DataType_BOOL;
  static constexpr DataType STRING =
    VariableDescription_DataType_STRING;
  static constexpr DataType BYTES =
    VariableDescription_DataType_BYTES;
  static inline bool DataType_IsValid(int value) {
    return VariableDescription_DataType_IsValid(value);
  }
  static constexpr DataType DataType_MIN =
    VariableDescription_DataType_DataType_MIN;
  static constexpr DataType DataType_MAX =
    VariableDescription_DataType_DataType_MAX;
  static constexpr int DataType_ARRAYSIZE =
    VariableDescription_DataType_DataType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  DataType_descriptor() {
    return VariableDescription_DataType_descriptor();
  }
  template<typename T>
  static inline const std::string& DataType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, DataType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function DataType_Name.");
    return VariableDescription_DataType_Name(enum_t_value);
  }
  static inline bool DataType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      DataType* value) {
    return VariableDescription_DataType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kDimensionsFieldNumber = 4,
    kEntityIDFieldNumber = 1,
    kIDFieldNumber = 2,
    kDataTypeFieldNumber = 3,
  };
  // repeated uint64 dimensions = 4;
  int dimensions_size() const;
  private:
  int _internal_dimensions_size() const;
  public:
  void clear_dimensions();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_dimensions(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_dimensions() const;
  void _internal_add_dimensions(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_dimensions();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 dimensions(int index) const;
  void set_dimensions(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_dimensions(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      dimensions() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_dimensions();

  // int32 entityID = 1;
  void clear_entityid();
  ::PROTOBUF_NAMESPACE_ID::int32 entityid() const;
  void set_entityid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_entityid() const;
  void _internal_set_entityid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 ID = 2;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .tcp_io_device.VariableDescription.DataType dataType = 3;
  void clear_datatype();
  ::tcp_io_device::VariableDescription_DataType datatype() const;
  void set_datatype(::tcp_io_device::VariableDescription_DataType value);
  private:
  ::tcp_io_device::VariableDescription_DataType _internal_datatype() const;
  void _internal_set_datatype(::tcp_io_device::VariableDescription_DataType value);
  public:

  // @@protoc_insertion_point(class_scope:tcp_io_device.VariableDescription)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > dimensions_;
  mutable std::atomic<int> _dimensions_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 entityid_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  int datatype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tcp_5fdata_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class ProtoVariable PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tcp_io_device.ProtoVariable) */ {
 public:
  inline ProtoVariable() : ProtoVariable(nullptr) {}
  virtual ~ProtoVariable();

  ProtoVariable(const ProtoVariable& from);
  ProtoVariable(ProtoVariable&& from) noexcept
    : ProtoVariable() {
    *this = ::std::move(from);
  }

  inline ProtoVariable& operator=(const ProtoVariable& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProtoVariable& operator=(ProtoVariable&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProtoVariable& default_instance();

  static inline const ProtoVariable* internal_default_instance() {
    return reinterpret_cast<const ProtoVariable*>(
               &_ProtoVariable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(ProtoVariable& a, ProtoVariable& b) {
    a.Swap(&b);
  }
  inline void Swap(ProtoVariable* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProtoVariable* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProtoVariable* New() const final {
    return CreateMaybeMessage<ProtoVariable>(nullptr);
  }

  ProtoVariable* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProtoVariable>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProtoVariable& from);
  void MergeFrom(const ProtoVariable& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProtoVariable* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tcp_io_device.ProtoVariable";
  }
  protected:
  explicit ProtoVariable(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tcp_5fdata_5fmessage_2eproto);
    return ::descriptor_table_tcp_5fdata_5fmessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 2,
    kMetaDataFieldNumber = 1,
  };
  // bytes data = 2;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // .tcp_io_device.VariableDescription metaData = 1;
  bool has_metadata() const;
  private:
  bool _internal_has_metadata() const;
  public:
  void clear_metadata();
  const ::tcp_io_device::VariableDescription& metadata() const;
  ::tcp_io_device::VariableDescription* release_metadata();
  ::tcp_io_device::VariableDescription* mutable_metadata();
  void set_allocated_metadata(::tcp_io_device::VariableDescription* metadata);
  private:
  const ::tcp_io_device::VariableDescription& _internal_metadata() const;
  ::tcp_io_device::VariableDescription* _internal_mutable_metadata();
  public:
  void unsafe_arena_set_allocated_metadata(
      ::tcp_io_device::VariableDescription* metadata);
  ::tcp_io_device::VariableDescription* unsafe_arena_release_metadata();

  // @@protoc_insertion_point(class_scope:tcp_io_device.ProtoVariable)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::tcp_io_device::VariableDescription* metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tcp_5fdata_5fmessage_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TCPMessage

// .tcp_io_device.TCPMessage.Type messageType = 1;
inline void TCPMessage::clear_messagetype() {
  messagetype_ = 0;
}
inline ::tcp_io_device::TCPMessage_Type TCPMessage::_internal_messagetype() const {
  return static_cast< ::tcp_io_device::TCPMessage_Type >(messagetype_);
}
inline ::tcp_io_device::TCPMessage_Type TCPMessage::messagetype() const {
  // @@protoc_insertion_point(field_get:tcp_io_device.TCPMessage.messageType)
  return _internal_messagetype();
}
inline void TCPMessage::_internal_set_messagetype(::tcp_io_device::TCPMessage_Type value) {
  
  messagetype_ = value;
}
inline void TCPMessage::set_messagetype(::tcp_io_device::TCPMessage_Type value) {
  _internal_set_messagetype(value);
  // @@protoc_insertion_point(field_set:tcp_io_device.TCPMessage.messageType)
}

// .tcp_io_device.SetupMessage setupMessage = 2;
inline bool TCPMessage::_internal_has_setupmessage() const {
  return message_case() == kSetupMessage;
}
inline bool TCPMessage::has_setupmessage() const {
  return _internal_has_setupmessage();
}
inline void TCPMessage::set_has_setupmessage() {
  _oneof_case_[0] = kSetupMessage;
}
inline void TCPMessage::clear_setupmessage() {
  if (_internal_has_setupmessage()) {
    if (GetArena() == nullptr) {
      delete message_.setupmessage_;
    }
    clear_has_message();
  }
}
inline ::tcp_io_device::SetupMessage* TCPMessage::release_setupmessage() {
  // @@protoc_insertion_point(field_release:tcp_io_device.TCPMessage.setupMessage)
  if (_internal_has_setupmessage()) {
    clear_has_message();
      ::tcp_io_device::SetupMessage* temp = message_.setupmessage_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    message_.setupmessage_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tcp_io_device::SetupMessage& TCPMessage::_internal_setupmessage() const {
  return _internal_has_setupmessage()
      ? *message_.setupmessage_
      : reinterpret_cast< ::tcp_io_device::SetupMessage&>(::tcp_io_device::_SetupMessage_default_instance_);
}
inline const ::tcp_io_device::SetupMessage& TCPMessage::setupmessage() const {
  // @@protoc_insertion_point(field_get:tcp_io_device.TCPMessage.setupMessage)
  return _internal_setupmessage();
}
inline ::tcp_io_device::SetupMessage* TCPMessage::unsafe_arena_release_setupmessage() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tcp_io_device.TCPMessage.setupMessage)
  if (_internal_has_setupmessage()) {
    clear_has_message();
    ::tcp_io_device::SetupMessage* temp = message_.setupmessage_;
    message_.setupmessage_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TCPMessage::unsafe_arena_set_allocated_setupmessage(::tcp_io_device::SetupMessage* setupmessage) {
  clear_message();
  if (setupmessage) {
    set_has_setupmessage();
    message_.setupmessage_ = setupmessage;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tcp_io_device.TCPMessage.setupMessage)
}
inline ::tcp_io_device::SetupMessage* TCPMessage::_internal_mutable_setupmessage() {
  if (!_internal_has_setupmessage()) {
    clear_message();
    set_has_setupmessage();
    message_.setupmessage_ = CreateMaybeMessage< ::tcp_io_device::SetupMessage >(GetArena());
  }
  return message_.setupmessage_;
}
inline ::tcp_io_device::SetupMessage* TCPMessage::mutable_setupmessage() {
  // @@protoc_insertion_point(field_mutable:tcp_io_device.TCPMessage.setupMessage)
  return _internal_mutable_setupmessage();
}

// .tcp_io_device.DataMessage dataMessage = 3;
inline bool TCPMessage::_internal_has_datamessage() const {
  return message_case() == kDataMessage;
}
inline bool TCPMessage::has_datamessage() const {
  return _internal_has_datamessage();
}
inline void TCPMessage::set_has_datamessage() {
  _oneof_case_[0] = kDataMessage;
}
inline void TCPMessage::clear_datamessage() {
  if (_internal_has_datamessage()) {
    if (GetArena() == nullptr) {
      delete message_.datamessage_;
    }
    clear_has_message();
  }
}
inline ::tcp_io_device::DataMessage* TCPMessage::release_datamessage() {
  // @@protoc_insertion_point(field_release:tcp_io_device.TCPMessage.dataMessage)
  if (_internal_has_datamessage()) {
    clear_has_message();
      ::tcp_io_device::DataMessage* temp = message_.datamessage_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    message_.datamessage_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tcp_io_device::DataMessage& TCPMessage::_internal_datamessage() const {
  return _internal_has_datamessage()
      ? *message_.datamessage_
      : reinterpret_cast< ::tcp_io_device::DataMessage&>(::tcp_io_device::_DataMessage_default_instance_);
}
inline const ::tcp_io_device::DataMessage& TCPMessage::datamessage() const {
  // @@protoc_insertion_point(field_get:tcp_io_device.TCPMessage.dataMessage)
  return _internal_datamessage();
}
inline ::tcp_io_device::DataMessage* TCPMessage::unsafe_arena_release_datamessage() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tcp_io_device.TCPMessage.dataMessage)
  if (_internal_has_datamessage()) {
    clear_has_message();
    ::tcp_io_device::DataMessage* temp = message_.datamessage_;
    message_.datamessage_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TCPMessage::unsafe_arena_set_allocated_datamessage(::tcp_io_device::DataMessage* datamessage) {
  clear_message();
  if (datamessage) {
    set_has_datamessage();
    message_.datamessage_ = datamessage;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tcp_io_device.TCPMessage.dataMessage)
}
inline ::tcp_io_device::DataMessage* TCPMessage::_internal_mutable_datamessage() {
  if (!_internal_has_datamessage()) {
    clear_message();
    set_has_datamessage();
    message_.datamessage_ = CreateMaybeMessage< ::tcp_io_device::DataMessage >(GetArena());
  }
  return message_.datamessage_;
}
inline ::tcp_io_device::DataMessage* TCPMessage::mutable_datamessage() {
  // @@protoc_insertion_point(field_mutable:tcp_io_device.TCPMessage.dataMessage)
  return _internal_mutable_datamessage();
}

// .tcp_io_device.StartMessage startMessage = 4;
inline bool TCPMessage::_internal_has_startmessage() const {
  return message_case() == kStartMessage;
}
inline bool TCPMessage::has_startmessage() const {
  return _internal_has_startmessage();
}
inline void TCPMessage::set_has_startmessage() {
  _oneof_case_[0] = kStartMessage;
}
inline void TCPMessage::clear_startmessage() {
  if (_internal_has_startmessage()) {
    if (GetArena() == nullptr) {
      delete message_.startmessage_;
    }
    clear_has_message();
  }
}
inline ::tcp_io_device::StartMessage* TCPMessage::release_startmessage() {
  // @@protoc_insertion_point(field_release:tcp_io_device.TCPMessage.startMessage)
  if (_internal_has_startmessage()) {
    clear_has_message();
      ::tcp_io_device::StartMessage* temp = message_.startmessage_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    message_.startmessage_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tcp_io_device::StartMessage& TCPMessage::_internal_startmessage() const {
  return _internal_has_startmessage()
      ? *message_.startmessage_
      : reinterpret_cast< ::tcp_io_device::StartMessage&>(::tcp_io_device::_StartMessage_default_instance_);
}
inline const ::tcp_io_device::StartMessage& TCPMessage::startmessage() const {
  // @@protoc_insertion_point(field_get:tcp_io_device.TCPMessage.startMessage)
  return _internal_startmessage();
}
inline ::tcp_io_device::StartMessage* TCPMessage::unsafe_arena_release_startmessage() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tcp_io_device.TCPMessage.startMessage)
  if (_internal_has_startmessage()) {
    clear_has_message();
    ::tcp_io_device::StartMessage* temp = message_.startmessage_;
    message_.startmessage_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TCPMessage::unsafe_arena_set_allocated_startmessage(::tcp_io_device::StartMessage* startmessage) {
  clear_message();
  if (startmessage) {
    set_has_startmessage();
    message_.startmessage_ = startmessage;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tcp_io_device.TCPMessage.startMessage)
}
inline ::tcp_io_device::StartMessage* TCPMessage::_internal_mutable_startmessage() {
  if (!_internal_has_startmessage()) {
    clear_message();
    set_has_startmessage();
    message_.startmessage_ = CreateMaybeMessage< ::tcp_io_device::StartMessage >(GetArena());
  }
  return message_.startmessage_;
}
inline ::tcp_io_device::StartMessage* TCPMessage::mutable_startmessage() {
  // @@protoc_insertion_point(field_mutable:tcp_io_device.TCPMessage.startMessage)
  return _internal_mutable_startmessage();
}

// .tcp_io_device.StopMessage stopMessage = 5;
inline bool TCPMessage::_internal_has_stopmessage() const {
  return message_case() == kStopMessage;
}
inline bool TCPMessage::has_stopmessage() const {
  return _internal_has_stopmessage();
}
inline void TCPMessage::set_has_stopmessage() {
  _oneof_case_[0] = kStopMessage;
}
inline void TCPMessage::clear_stopmessage() {
  if (_internal_has_stopmessage()) {
    if (GetArena() == nullptr) {
      delete message_.stopmessage_;
    }
    clear_has_message();
  }
}
inline ::tcp_io_device::StopMessage* TCPMessage::release_stopmessage() {
  // @@protoc_insertion_point(field_release:tcp_io_device.TCPMessage.stopMessage)
  if (_internal_has_stopmessage()) {
    clear_has_message();
      ::tcp_io_device::StopMessage* temp = message_.stopmessage_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    message_.stopmessage_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tcp_io_device::StopMessage& TCPMessage::_internal_stopmessage() const {
  return _internal_has_stopmessage()
      ? *message_.stopmessage_
      : reinterpret_cast< ::tcp_io_device::StopMessage&>(::tcp_io_device::_StopMessage_default_instance_);
}
inline const ::tcp_io_device::StopMessage& TCPMessage::stopmessage() const {
  // @@protoc_insertion_point(field_get:tcp_io_device.TCPMessage.stopMessage)
  return _internal_stopmessage();
}
inline ::tcp_io_device::StopMessage* TCPMessage::unsafe_arena_release_stopmessage() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tcp_io_device.TCPMessage.stopMessage)
  if (_internal_has_stopmessage()) {
    clear_has_message();
    ::tcp_io_device::StopMessage* temp = message_.stopmessage_;
    message_.stopmessage_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TCPMessage::unsafe_arena_set_allocated_stopmessage(::tcp_io_device::StopMessage* stopmessage) {
  clear_message();
  if (stopmessage) {
    set_has_stopmessage();
    message_.stopmessage_ = stopmessage;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tcp_io_device.TCPMessage.stopMessage)
}
inline ::tcp_io_device::StopMessage* TCPMessage::_internal_mutable_stopmessage() {
  if (!_internal_has_stopmessage()) {
    clear_message();
    set_has_stopmessage();
    message_.stopmessage_ = CreateMaybeMessage< ::tcp_io_device::StopMessage >(GetArena());
  }
  return message_.stopmessage_;
}
inline ::tcp_io_device::StopMessage* TCPMessage::mutable_stopmessage() {
  // @@protoc_insertion_point(field_mutable:tcp_io_device.TCPMessage.stopMessage)
  return _internal_mutable_stopmessage();
}

// uint64 timestamp = 6;
inline void TCPMessage::clear_timestamp() {
  timestamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TCPMessage::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TCPMessage::timestamp() const {
  // @@protoc_insertion_point(field_get:tcp_io_device.TCPMessage.timestamp)
  return _internal_timestamp();
}
inline void TCPMessage::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  timestamp_ = value;
}
inline void TCPMessage::set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:tcp_io_device.TCPMessage.timestamp)
}

inline bool TCPMessage::has_message() const {
  return message_case() != MESSAGE_NOT_SET;
}
inline void TCPMessage::clear_has_message() {
  _oneof_case_[0] = MESSAGE_NOT_SET;
}
inline TCPMessage::MessageCase TCPMessage::message_case() const {
  return TCPMessage::MessageCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// StartMessage

// bool diagnosticMode = 1;
inline void StartMessage::clear_diagnosticmode() {
  diagnosticmode_ = false;
}
inline bool StartMessage::_internal_diagnosticmode() const {
  return diagnosticmode_;
}
inline bool StartMessage::diagnosticmode() const {
  // @@protoc_insertion_point(field_get:tcp_io_device.StartMessage.diagnosticMode)
  return _internal_diagnosticmode();
}
inline void StartMessage::_internal_set_diagnosticmode(bool value) {
  
  diagnosticmode_ = value;
}
inline void StartMessage::set_diagnosticmode(bool value) {
  _internal_set_diagnosticmode(value);
  // @@protoc_insertion_point(field_set:tcp_io_device.StartMessage.diagnosticMode)
}

// -------------------------------------------------------------------

// StopMessage

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// SetupMessage

// map<string, int32> entities = 1;
inline int SetupMessage::_internal_entities_size() const {
  return entities_.size();
}
inline int SetupMessage::entities_size() const {
  return _internal_entities_size();
}
inline void SetupMessage::clear_entities() {
  entities_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >&
SetupMessage::_internal_entities() const {
  return entities_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >&
SetupMessage::entities() const {
  // @@protoc_insertion_point(field_map:tcp_io_device.SetupMessage.entities)
  return _internal_entities();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >*
SetupMessage::_internal_mutable_entities() {
  return entities_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >*
SetupMessage::mutable_entities() {
  // @@protoc_insertion_point(field_mutable_map:tcp_io_device.SetupMessage.entities)
  return _internal_mutable_entities();
}

// map<string, int32> objects = 2;
inline int SetupMessage::_internal_objects_size() const {
  return objects_.size();
}
inline int SetupMessage::objects_size() const {
  return _internal_objects_size();
}
inline void SetupMessage::clear_objects() {
  objects_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >&
SetupMessage::_internal_objects() const {
  return objects_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >&
SetupMessage::objects() const {
  // @@protoc_insertion_point(field_map:tcp_io_device.SetupMessage.objects)
  return _internal_objects();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >*
SetupMessage::_internal_mutable_objects() {
  return objects_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >*
SetupMessage::mutable_objects() {
  // @@protoc_insertion_point(field_mutable_map:tcp_io_device.SetupMessage.objects)
  return _internal_mutable_objects();
}

// map<string, int32> commands = 3;
inline int SetupMessage::_internal_commands_size() const {
  return commands_.size();
}
inline int SetupMessage::commands_size() const {
  return _internal_commands_size();
}
inline void SetupMessage::clear_commands() {
  commands_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >&
SetupMessage::_internal_commands() const {
  return commands_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >&
SetupMessage::commands() const {
  // @@protoc_insertion_point(field_map:tcp_io_device.SetupMessage.commands)
  return _internal_commands();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >*
SetupMessage::_internal_mutable_commands() {
  return commands_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >*
SetupMessage::mutable_commands() {
  // @@protoc_insertion_point(field_mutable_map:tcp_io_device.SetupMessage.commands)
  return _internal_mutable_commands();
}

// repeated .tcp_io_device.CommandDescription commandDescriptions = 4;
inline int SetupMessage::_internal_commanddescriptions_size() const {
  return commanddescriptions_.size();
}
inline int SetupMessage::commanddescriptions_size() const {
  return _internal_commanddescriptions_size();
}
inline void SetupMessage::clear_commanddescriptions() {
  commanddescriptions_.Clear();
}
inline ::tcp_io_device::CommandDescription* SetupMessage::mutable_commanddescriptions(int index) {
  // @@protoc_insertion_point(field_mutable:tcp_io_device.SetupMessage.commandDescriptions)
  return commanddescriptions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tcp_io_device::CommandDescription >*
SetupMessage::mutable_commanddescriptions() {
  // @@protoc_insertion_point(field_mutable_list:tcp_io_device.SetupMessage.commandDescriptions)
  return &commanddescriptions_;
}
inline const ::tcp_io_device::CommandDescription& SetupMessage::_internal_commanddescriptions(int index) const {
  return commanddescriptions_.Get(index);
}
inline const ::tcp_io_device::CommandDescription& SetupMessage::commanddescriptions(int index) const {
  // @@protoc_insertion_point(field_get:tcp_io_device.SetupMessage.commandDescriptions)
  return _internal_commanddescriptions(index);
}
inline ::tcp_io_device::CommandDescription* SetupMessage::_internal_add_commanddescriptions() {
  return commanddescriptions_.Add();
}
inline ::tcp_io_device::CommandDescription* SetupMessage::add_commanddescriptions() {
  // @@protoc_insertion_point(field_add:tcp_io_device.SetupMessage.commandDescriptions)
  return _internal_add_commanddescriptions();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tcp_io_device::CommandDescription >&
SetupMessage::commanddescriptions() const {
  // @@protoc_insertion_point(field_list:tcp_io_device.SetupMessage.commandDescriptions)
  return commanddescriptions_;
}

// -------------------------------------------------------------------

// CommandDescription

// .tcp_io_device.VariableDescription description = 1;
inline bool CommandDescription::_internal_has_description() const {
  return this != internal_default_instance() && description_ != nullptr;
}
inline bool CommandDescription::has_description() const {
  return _internal_has_description();
}
inline void CommandDescription::clear_description() {
  if (GetArena() == nullptr && description_ != nullptr) {
    delete description_;
  }
  description_ = nullptr;
}
inline const ::tcp_io_device::VariableDescription& CommandDescription::_internal_description() const {
  const ::tcp_io_device::VariableDescription* p = description_;
  return p != nullptr ? *p : reinterpret_cast<const ::tcp_io_device::VariableDescription&>(
      ::tcp_io_device::_VariableDescription_default_instance_);
}
inline const ::tcp_io_device::VariableDescription& CommandDescription::description() const {
  // @@protoc_insertion_point(field_get:tcp_io_device.CommandDescription.description)
  return _internal_description();
}
inline void CommandDescription::unsafe_arena_set_allocated_description(
    ::tcp_io_device::VariableDescription* description) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(description_);
  }
  description_ = description;
  if (description) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tcp_io_device.CommandDescription.description)
}
inline ::tcp_io_device::VariableDescription* CommandDescription::release_description() {
  
  ::tcp_io_device::VariableDescription* temp = description_;
  description_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::tcp_io_device::VariableDescription* CommandDescription::unsafe_arena_release_description() {
  // @@protoc_insertion_point(field_release:tcp_io_device.CommandDescription.description)
  
  ::tcp_io_device::VariableDescription* temp = description_;
  description_ = nullptr;
  return temp;
}
inline ::tcp_io_device::VariableDescription* CommandDescription::_internal_mutable_description() {
  
  if (description_ == nullptr) {
    auto* p = CreateMaybeMessage<::tcp_io_device::VariableDescription>(GetArena());
    description_ = p;
  }
  return description_;
}
inline ::tcp_io_device::VariableDescription* CommandDescription::mutable_description() {
  // @@protoc_insertion_point(field_mutable:tcp_io_device.CommandDescription.description)
  return _internal_mutable_description();
}
inline void CommandDescription::set_allocated_description(::tcp_io_device::VariableDescription* description) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete description_;
  }
  if (description) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(description);
    if (message_arena != submessage_arena) {
      description = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, description, submessage_arena);
    }
    
  } else {
    
  }
  description_ = description;
  // @@protoc_insertion_point(field_set_allocated:tcp_io_device.CommandDescription.description)
}

// string name = 2;
inline void CommandDescription::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& CommandDescription::name() const {
  // @@protoc_insertion_point(field_get:tcp_io_device.CommandDescription.name)
  return _internal_name();
}
inline void CommandDescription::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:tcp_io_device.CommandDescription.name)
}
inline std::string* CommandDescription::mutable_name() {
  // @@protoc_insertion_point(field_mutable:tcp_io_device.CommandDescription.name)
  return _internal_mutable_name();
}
inline const std::string& CommandDescription::_internal_name() const {
  return name_.Get();
}
inline void CommandDescription::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CommandDescription::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:tcp_io_device.CommandDescription.name)
}
inline void CommandDescription::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:tcp_io_device.CommandDescription.name)
}
inline void CommandDescription::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:tcp_io_device.CommandDescription.name)
}
inline std::string* CommandDescription::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CommandDescription::release_name() {
  // @@protoc_insertion_point(field_release:tcp_io_device.CommandDescription.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CommandDescription::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tcp_io_device.CommandDescription.name)
}

// -------------------------------------------------------------------

// DataMessage

// repeated .tcp_io_device.ProtoVariable variables = 1;
inline int DataMessage::_internal_variables_size() const {
  return variables_.size();
}
inline int DataMessage::variables_size() const {
  return _internal_variables_size();
}
inline void DataMessage::clear_variables() {
  variables_.Clear();
}
inline ::tcp_io_device::ProtoVariable* DataMessage::mutable_variables(int index) {
  // @@protoc_insertion_point(field_mutable:tcp_io_device.DataMessage.variables)
  return variables_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tcp_io_device::ProtoVariable >*
DataMessage::mutable_variables() {
  // @@protoc_insertion_point(field_mutable_list:tcp_io_device.DataMessage.variables)
  return &variables_;
}
inline const ::tcp_io_device::ProtoVariable& DataMessage::_internal_variables(int index) const {
  return variables_.Get(index);
}
inline const ::tcp_io_device::ProtoVariable& DataMessage::variables(int index) const {
  // @@protoc_insertion_point(field_get:tcp_io_device.DataMessage.variables)
  return _internal_variables(index);
}
inline ::tcp_io_device::ProtoVariable* DataMessage::_internal_add_variables() {
  return variables_.Add();
}
inline ::tcp_io_device::ProtoVariable* DataMessage::add_variables() {
  // @@protoc_insertion_point(field_add:tcp_io_device.DataMessage.variables)
  return _internal_add_variables();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tcp_io_device::ProtoVariable >&
DataMessage::variables() const {
  // @@protoc_insertion_point(field_list:tcp_io_device.DataMessage.variables)
  return variables_;
}

// uint64 timeSpan = 2;
inline void DataMessage::clear_timespan() {
  timespan_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DataMessage::_internal_timespan() const {
  return timespan_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DataMessage::timespan() const {
  // @@protoc_insertion_point(field_get:tcp_io_device.DataMessage.timeSpan)
  return _internal_timespan();
}
inline void DataMessage::_internal_set_timespan(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  timespan_ = value;
}
inline void DataMessage::set_timespan(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_timespan(value);
  // @@protoc_insertion_point(field_set:tcp_io_device.DataMessage.timeSpan)
}

// -------------------------------------------------------------------

// VariableDescription

// int32 entityID = 1;
inline void VariableDescription::clear_entityid() {
  entityid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VariableDescription::_internal_entityid() const {
  return entityid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VariableDescription::entityid() const {
  // @@protoc_insertion_point(field_get:tcp_io_device.VariableDescription.entityID)
  return _internal_entityid();
}
inline void VariableDescription::_internal_set_entityid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  entityid_ = value;
}
inline void VariableDescription::set_entityid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_entityid(value);
  // @@protoc_insertion_point(field_set:tcp_io_device.VariableDescription.entityID)
}

// int32 ID = 2;
inline void VariableDescription::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VariableDescription::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VariableDescription::id() const {
  // @@protoc_insertion_point(field_get:tcp_io_device.VariableDescription.ID)
  return _internal_id();
}
inline void VariableDescription::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void VariableDescription::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:tcp_io_device.VariableDescription.ID)
}

// .tcp_io_device.VariableDescription.DataType dataType = 3;
inline void VariableDescription::clear_datatype() {
  datatype_ = 0;
}
inline ::tcp_io_device::VariableDescription_DataType VariableDescription::_internal_datatype() const {
  return static_cast< ::tcp_io_device::VariableDescription_DataType >(datatype_);
}
inline ::tcp_io_device::VariableDescription_DataType VariableDescription::datatype() const {
  // @@protoc_insertion_point(field_get:tcp_io_device.VariableDescription.dataType)
  return _internal_datatype();
}
inline void VariableDescription::_internal_set_datatype(::tcp_io_device::VariableDescription_DataType value) {
  
  datatype_ = value;
}
inline void VariableDescription::set_datatype(::tcp_io_device::VariableDescription_DataType value) {
  _internal_set_datatype(value);
  // @@protoc_insertion_point(field_set:tcp_io_device.VariableDescription.dataType)
}

// repeated uint64 dimensions = 4;
inline int VariableDescription::_internal_dimensions_size() const {
  return dimensions_.size();
}
inline int VariableDescription::dimensions_size() const {
  return _internal_dimensions_size();
}
inline void VariableDescription::clear_dimensions() {
  dimensions_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 VariableDescription::_internal_dimensions(int index) const {
  return dimensions_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 VariableDescription::dimensions(int index) const {
  // @@protoc_insertion_point(field_get:tcp_io_device.VariableDescription.dimensions)
  return _internal_dimensions(index);
}
inline void VariableDescription::set_dimensions(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  dimensions_.Set(index, value);
  // @@protoc_insertion_point(field_set:tcp_io_device.VariableDescription.dimensions)
}
inline void VariableDescription::_internal_add_dimensions(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  dimensions_.Add(value);
}
inline void VariableDescription::add_dimensions(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_dimensions(value);
  // @@protoc_insertion_point(field_add:tcp_io_device.VariableDescription.dimensions)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
VariableDescription::_internal_dimensions() const {
  return dimensions_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
VariableDescription::dimensions() const {
  // @@protoc_insertion_point(field_list:tcp_io_device.VariableDescription.dimensions)
  return _internal_dimensions();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
VariableDescription::_internal_mutable_dimensions() {
  return &dimensions_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
VariableDescription::mutable_dimensions() {
  // @@protoc_insertion_point(field_mutable_list:tcp_io_device.VariableDescription.dimensions)
  return _internal_mutable_dimensions();
}

// -------------------------------------------------------------------

// ProtoVariable

// .tcp_io_device.VariableDescription metaData = 1;
inline bool ProtoVariable::_internal_has_metadata() const {
  return this != internal_default_instance() && metadata_ != nullptr;
}
inline bool ProtoVariable::has_metadata() const {
  return _internal_has_metadata();
}
inline void ProtoVariable::clear_metadata() {
  if (GetArena() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
}
inline const ::tcp_io_device::VariableDescription& ProtoVariable::_internal_metadata() const {
  const ::tcp_io_device::VariableDescription* p = metadata_;
  return p != nullptr ? *p : reinterpret_cast<const ::tcp_io_device::VariableDescription&>(
      ::tcp_io_device::_VariableDescription_default_instance_);
}
inline const ::tcp_io_device::VariableDescription& ProtoVariable::metadata() const {
  // @@protoc_insertion_point(field_get:tcp_io_device.ProtoVariable.metaData)
  return _internal_metadata();
}
inline void ProtoVariable::unsafe_arena_set_allocated_metadata(
    ::tcp_io_device::VariableDescription* metadata) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata_);
  }
  metadata_ = metadata;
  if (metadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tcp_io_device.ProtoVariable.metaData)
}
inline ::tcp_io_device::VariableDescription* ProtoVariable::release_metadata() {
  
  ::tcp_io_device::VariableDescription* temp = metadata_;
  metadata_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::tcp_io_device::VariableDescription* ProtoVariable::unsafe_arena_release_metadata() {
  // @@protoc_insertion_point(field_release:tcp_io_device.ProtoVariable.metaData)
  
  ::tcp_io_device::VariableDescription* temp = metadata_;
  metadata_ = nullptr;
  return temp;
}
inline ::tcp_io_device::VariableDescription* ProtoVariable::_internal_mutable_metadata() {
  
  if (metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::tcp_io_device::VariableDescription>(GetArena());
    metadata_ = p;
  }
  return metadata_;
}
inline ::tcp_io_device::VariableDescription* ProtoVariable::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable:tcp_io_device.ProtoVariable.metaData)
  return _internal_mutable_metadata();
}
inline void ProtoVariable::set_allocated_metadata(::tcp_io_device::VariableDescription* metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete metadata_;
  }
  if (metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(metadata);
    if (message_arena != submessage_arena) {
      metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metadata, submessage_arena);
    }
    
  } else {
    
  }
  metadata_ = metadata;
  // @@protoc_insertion_point(field_set_allocated:tcp_io_device.ProtoVariable.metaData)
}

// bytes data = 2;
inline void ProtoVariable::clear_data() {
  data_.ClearToEmpty();
}
inline const std::string& ProtoVariable::data() const {
  // @@protoc_insertion_point(field_get:tcp_io_device.ProtoVariable.data)
  return _internal_data();
}
inline void ProtoVariable::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:tcp_io_device.ProtoVariable.data)
}
inline std::string* ProtoVariable::mutable_data() {
  // @@protoc_insertion_point(field_mutable:tcp_io_device.ProtoVariable.data)
  return _internal_mutable_data();
}
inline const std::string& ProtoVariable::_internal_data() const {
  return data_.Get();
}
inline void ProtoVariable::_internal_set_data(const std::string& value) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ProtoVariable::set_data(std::string&& value) {
  
  data_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:tcp_io_device.ProtoVariable.data)
}
inline void ProtoVariable::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:tcp_io_device.ProtoVariable.data)
}
inline void ProtoVariable::set_data(const void* value,
    size_t size) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:tcp_io_device.ProtoVariable.data)
}
inline std::string* ProtoVariable::_internal_mutable_data() {
  
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ProtoVariable::release_data() {
  // @@protoc_insertion_point(field_release:tcp_io_device.ProtoVariable.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ProtoVariable::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tcp_io_device.ProtoVariable.data)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace tcp_io_device

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::tcp_io_device::TCPMessage_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::tcp_io_device::TCPMessage_Type>() {
  return ::tcp_io_device::TCPMessage_Type_descriptor();
}
template <> struct is_proto_enum< ::tcp_io_device::VariableDescription_DataType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::tcp_io_device::VariableDescription_DataType>() {
  return ::tcp_io_device::VariableDescription_DataType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_tcp_5fdata_5fmessage_2eproto
